[{"name":"ANESTHESIA","description":"entity.process.ProcessData.ProcessStep.ANESTHESIA","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-a-n-e-s-t-h-e-s-i-a/index.html","searchKeys":["ANESTHESIA","ANESTHESIA","entity.process.ProcessData.ProcessStep.ANESTHESIA"]},{"name":"ANESTHETIST","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.ANESTHETIST","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/-a-n-e-s-t-h-e-t-i-s-t/index.html","searchKeys":["ANESTHETIST","ANESTHETIST","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.ANESTHETIST"]},{"name":"BODY_TEMPERATURE","description":"application.presenter.database.model.MedicalDataType.BODY_TEMPERATURE","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-b-o-d-y_-t-e-m-p-e-r-a-t-u-r-e/index.html","searchKeys":["BODY_TEMPERATURE","BODY_TEMPERATURE","application.presenter.database.model.MedicalDataType.BODY_TEMPERATURE"]},{"name":"CATHETER","description":"entity.medicaldevice.MedicalDeviceData.DeviceType.CATHETER","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-device-type/-c-a-t-h-e-t-e-r/index.html","searchKeys":["CATHETER","CATHETER","entity.medicaldevice.MedicalDeviceData.DeviceType.CATHETER"]},{"name":"CELSIUS","description":"entity.patient.PatientData.TemperatureUnit.CELSIUS","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-temperature-unit/-c-e-l-s-i-u-s/index.html","searchKeys":["CELSIUS","CELSIUS","entity.patient.PatientData.TemperatureUnit.CELSIUS"]},{"name":"DIASTOLIC_BLOOD_PRESSURE","description":"application.presenter.database.model.MedicalDataType.DIASTOLIC_BLOOD_PRESSURE","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-d-i-a-s-t-o-l-i-c_-b-l-o-o-d_-p-r-e-s-s-u-r-e/index.html","searchKeys":["DIASTOLIC_BLOOD_PRESSURE","DIASTOLIC_BLOOD_PRESSURE","application.presenter.database.model.MedicalDataType.DIASTOLIC_BLOOD_PRESSURE"]},{"name":"ENDOSCOPE","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.ENDOSCOPE","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-type/-e-n-d-o-s-c-o-p-e/index.html","searchKeys":["ENDOSCOPE","ENDOSCOPE","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.ENDOSCOPE"]},{"name":"END_OF_SURGERY","description":"entity.process.ProcessData.ProcessStep.END_OF_SURGERY","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-e-n-d_-o-f_-s-u-r-g-e-r-y/index.html","searchKeys":["END_OF_SURGERY","END_OF_SURGERY","entity.process.ProcessData.ProcessStep.END_OF_SURGERY"]},{"name":"HEARTH_BEAT","description":"application.presenter.database.model.MedicalDataType.HEARTH_BEAT","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-h-e-a-r-t-h_-b-e-a-t/index.html","searchKeys":["HEARTH_BEAT","HEARTH_BEAT","application.presenter.database.model.MedicalDataType.HEARTH_BEAT"]},{"name":"INTERRUPTED","description":"entity.process.ProcessData.ProcessState.INTERRUPTED","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/-i-n-t-e-r-r-u-p-t-e-d/index.html","searchKeys":["INTERRUPTED","INTERRUPTED","entity.process.ProcessData.ProcessState.INTERRUPTED"]},{"name":"NURSE","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.NURSE","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/-n-u-r-s-e/index.html","searchKeys":["NURSE","NURSE","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.NURSE"]},{"name":"OPERATING_ROOM","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.OPERATING_ROOM","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-room-type/-o-p-e-r-a-t-i-n-g_-r-o-o-m/index.html","searchKeys":["OPERATING_ROOM","OPERATING_ROOM","application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.OPERATING_ROOM"]},{"name":"OPERATING_ROOM","description":"entity.room.RoomData.RoomType.OPERATING_ROOM","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-type/-o-p-e-r-a-t-i-n-g_-r-o-o-m/index.html","searchKeys":["OPERATING_ROOM","OPERATING_ROOM","entity.room.RoomData.RoomType.OPERATING_ROOM"]},{"name":"PACE_MAKER","description":"entity.medicaldevice.MedicalDeviceData.DeviceType.PACE_MAKER","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-device-type/-p-a-c-e_-m-a-k-e-r/index.html","searchKeys":["PACE_MAKER","PACE_MAKER","entity.medicaldevice.MedicalDeviceData.DeviceType.PACE_MAKER"]},{"name":"PATIENT_IN_PREPARATION","description":"entity.process.ProcessData.ProcessStep.PATIENT_IN_PREPARATION","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-p-a-t-i-e-n-t_-i-n_-p-r-e-p-a-r-a-t-i-o-n/index.html","searchKeys":["PATIENT_IN_PREPARATION","PATIENT_IN_PREPARATION","entity.process.ProcessData.ProcessStep.PATIENT_IN_PREPARATION"]},{"name":"PATIENT_ON_OPERATING_TABLE","description":"entity.process.ProcessData.ProcessStep.PATIENT_ON_OPERATING_TABLE","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-p-a-t-i-e-n-t_-o-n_-o-p-e-r-a-t-i-n-g_-t-a-b-l-e/index.html","searchKeys":["PATIENT_ON_OPERATING_TABLE","PATIENT_ON_OPERATING_TABLE","entity.process.ProcessData.ProcessStep.PATIENT_ON_OPERATING_TABLE"]},{"name":"PATIENT_UNDER_OBSERVATION","description":"entity.process.ProcessData.ProcessStep.PATIENT_UNDER_OBSERVATION","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-p-a-t-i-e-n-t_-u-n-d-e-r_-o-b-s-e-r-v-a-t-i-o-n/index.html","searchKeys":["PATIENT_UNDER_OBSERVATION","PATIENT_UNDER_OBSERVATION","entity.process.ProcessData.ProcessStep.PATIENT_UNDER_OBSERVATION"]},{"name":"POST_SURGERY","description":"entity.process.ProcessData.ProcessState.POST_SURGERY","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/-p-o-s-t_-s-u-r-g-e-r-y/index.html","searchKeys":["POST_SURGERY","POST_SURGERY","entity.process.ProcessData.ProcessState.POST_SURGERY"]},{"name":"PRE_OPERATING_ROOM","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.PRE_OPERATING_ROOM","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-room-type/-p-r-e_-o-p-e-r-a-t-i-n-g_-r-o-o-m/index.html","searchKeys":["PRE_OPERATING_ROOM","PRE_OPERATING_ROOM","application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.PRE_OPERATING_ROOM"]},{"name":"PRE_POST_OPERATING_ROOM","description":"entity.room.RoomData.RoomType.PRE_POST_OPERATING_ROOM","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-type/-p-r-e_-p-o-s-t_-o-p-e-r-a-t-i-n-g_-r-o-o-m/index.html","searchKeys":["PRE_POST_OPERATING_ROOM","PRE_POST_OPERATING_ROOM","entity.room.RoomData.RoomType.PRE_POST_OPERATING_ROOM"]},{"name":"PRE_SURGERY","description":"entity.process.ProcessData.ProcessState.PRE_SURGERY","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/-p-r-e_-s-u-r-g-e-r-y/index.html","searchKeys":["PRE_SURGERY","PRE_SURGERY","entity.process.ProcessData.ProcessState.PRE_SURGERY"]},{"name":"RESPIRATION_RATE","description":"application.presenter.database.model.MedicalDataType.RESPIRATION_RATE","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-r-e-s-p-i-r-a-t-i-o-n_-r-a-t-e/index.html","searchKeys":["RESPIRATION_RATE","RESPIRATION_RATE","application.presenter.database.model.MedicalDataType.RESPIRATION_RATE"]},{"name":"SATURATION_PERCENTAGE","description":"application.presenter.database.model.MedicalDataType.SATURATION_PERCENTAGE","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-s-a-t-u-r-a-t-i-o-n_-p-e-r-c-e-n-t-a-g-e/index.html","searchKeys":["SATURATION_PERCENTAGE","SATURATION_PERCENTAGE","application.presenter.database.model.MedicalDataType.SATURATION_PERCENTAGE"]},{"name":"SURGEON","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.SURGEON","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/-s-u-r-g-e-o-n/index.html","searchKeys":["SURGEON","SURGEON","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.SURGEON"]},{"name":"SURGERY","description":"entity.process.ProcessData.ProcessState.SURGERY","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/-s-u-r-g-e-r-y/index.html","searchKeys":["SURGERY","SURGERY","entity.process.ProcessData.ProcessState.SURGERY"]},{"name":"SURGERY_IN_PROGRESS","description":"entity.process.ProcessData.ProcessStep.SURGERY_IN_PROGRESS","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/-s-u-r-g-e-r-y_-i-n_-p-r-o-g-r-e-s-s/index.html","searchKeys":["SURGERY_IN_PROGRESS","SURGERY_IN_PROGRESS","entity.process.ProcessData.ProcessStep.SURGERY_IN_PROGRESS"]},{"name":"SYSTOLIC_BLOOD_PRESSURE","description":"application.presenter.database.model.MedicalDataType.SYSTOLIC_BLOOD_PRESSURE","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/-s-y-s-t-o-l-i-c_-b-l-o-o-d_-p-r-e-s-s-u-r-e/index.html","searchKeys":["SYSTOLIC_BLOOD_PRESSURE","SYSTOLIC_BLOOD_PRESSURE","application.presenter.database.model.MedicalDataType.SYSTOLIC_BLOOD_PRESSURE"]},{"name":"TERMINATED","description":"entity.process.ProcessData.ProcessState.TERMINATED","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/-t-e-r-m-i-n-a-t-e-d/index.html","searchKeys":["TERMINATED","TERMINATED","entity.process.ProcessData.ProcessState.TERMINATED"]},{"name":"X_RAY","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.X_RAY","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-type/-x_-r-a-y/index.html","searchKeys":["X_RAY","X_RAY","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.X_RAY"]},{"name":"abstract fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","description":"application.controller.manager.MedicalDeviceDatabaseManager.addMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-database-manager/add-medical-device-usage.html","searchKeys":["addMedicalDeviceUsage","abstract fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","application.controller.manager.MedicalDeviceDatabaseManager.addMedicalDeviceUsage"]},{"name":"abstract fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","description":"usecase.repository.MedicalDeviceRepository.addMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/add-medical-device-usage.html","searchKeys":["addMedicalDeviceUsage","abstract fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","usecase.repository.MedicalDeviceRepository.addMedicalDeviceUsage"]},{"name":"abstract fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, dateTime: Instant, processId: ProcessData.ProcessId, inUse: Boolean): Boolean","description":"application.controller.manager.MedicalDeviceDatabaseManager.addMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-database-manager/add-medical-technology-usage.html","searchKeys":["addMedicalTechnologyUsage","abstract fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, dateTime: Instant, processId: ProcessData.ProcessId, inUse: Boolean): Boolean","application.controller.manager.MedicalDeviceDatabaseManager.addMedicalTechnologyUsage"]},{"name":"abstract fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean): Boolean","description":"usecase.repository.MedicalDeviceRepository.addMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/add-medical-technology-usage.html","searchKeys":["addMedicalTechnologyUsage","abstract fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean): Boolean","usecase.repository.MedicalDeviceRepository.addMedicalTechnologyUsage"]},{"name":"abstract fun canHandle(event: Event<*>): Boolean","description":"application.handler.EventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-event-handler/can-handle.html","searchKeys":["canHandle","abstract fun canHandle(event: Event<*>): Boolean","application.handler.EventHandler.canHandle"]},{"name":"abstract fun consume(event: Event<*>)","description":"application.handler.EventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-event-handler/consume.html","searchKeys":["consume","abstract fun consume(event: Event<*>)","application.handler.EventHandler.consume"]},{"name":"abstract fun createPatient(patientId: PatientData.PatientId): Patient?","description":"usecase.repository.PatientRepository.createPatient","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/create-patient.html","searchKeys":["createPatient","abstract fun createPatient(patientId: PatientData.PatientId): Patient?","usecase.repository.PatientRepository.createPatient"]},{"name":"abstract fun createPatientDT(patientId: PatientData.PatientId): Patient?","description":"application.controller.manager.PatientDigitalTwinManager.createPatientDT","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-digital-twin-manager/create-patient-d-t.html","searchKeys":["createPatientDT","abstract fun createPatientDT(patientId: PatientData.PatientId): Patient?","application.controller.manager.PatientDigitalTwinManager.createPatientDT"]},{"name":"abstract fun createSurgicalProcess(process: SurgicalProcess): Boolean","description":"application.controller.manager.ProcessDigitalTwinManager.createSurgicalProcess","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/create-surgical-process.html","searchKeys":["createSurgicalProcess","abstract fun createSurgicalProcess(process: SurgicalProcess): Boolean","application.controller.manager.ProcessDigitalTwinManager.createSurgicalProcess"]},{"name":"abstract fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","description":"usecase.repository.SurgicalProcessRepository.createSurgicalProcess","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/create-surgical-process.html","searchKeys":["createSurgicalProcess","abstract fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","usecase.repository.SurgicalProcessRepository.createSurgicalProcess"]},{"name":"abstract fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","description":"application.controller.manager.MedicalDeviceDigitalTwinManager.deleteMedicalDevice","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-digital-twin-manager/delete-medical-device.html","searchKeys":["deleteMedicalDevice","abstract fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","application.controller.manager.MedicalDeviceDigitalTwinManager.deleteMedicalDevice"]},{"name":"abstract fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","description":"usecase.repository.MedicalDeviceRepository.deleteMedicalDevice","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/delete-medical-device.html","searchKeys":["deleteMedicalDevice","abstract fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","usecase.repository.MedicalDeviceRepository.deleteMedicalDevice"]},{"name":"abstract fun deletePatient(patientId: PatientData.PatientId): Boolean","description":"usecase.repository.PatientRepository.deletePatient","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/delete-patient.html","searchKeys":["deletePatient","abstract fun deletePatient(patientId: PatientData.PatientId): Boolean","usecase.repository.PatientRepository.deletePatient"]},{"name":"abstract fun deletePatientDT(patientId: PatientData.PatientId): Boolean","description":"application.controller.manager.PatientDigitalTwinManager.deletePatientDT","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-digital-twin-manager/delete-patient-d-t.html","searchKeys":["deletePatientDT","abstract fun deletePatientDT(patientId: PatientData.PatientId): Boolean","application.controller.manager.PatientDigitalTwinManager.deletePatientDT"]},{"name":"abstract fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"application.controller.manager.SurgeryBookingDigitalTwinManager.deleteSurgeryBooking","location":"surgical-process-monitoring-microservice/application.controller.manager/-surgery-booking-digital-twin-manager/delete-surgery-booking.html","searchKeys":["deleteSurgeryBooking","abstract fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","application.controller.manager.SurgeryBookingDigitalTwinManager.deleteSurgeryBooking"]},{"name":"abstract fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"usecase.repository.BookingRepository.deleteSurgeryBooking","location":"surgical-process-monitoring-microservice/usecase.repository/-booking-repository/delete-surgery-booking.html","searchKeys":["deleteSurgeryBooking","abstract fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","usecase.repository.BookingRepository.deleteSurgeryBooking"]},{"name":"abstract fun deleteSurgicalProcess(processId: ProcessData.ProcessId): Boolean","description":"application.controller.manager.ProcessDigitalTwinManager.deleteSurgicalProcess","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/delete-surgical-process.html","searchKeys":["deleteSurgicalProcess","abstract fun deleteSurgicalProcess(processId: ProcessData.ProcessId): Boolean","application.controller.manager.ProcessDigitalTwinManager.deleteSurgicalProcess"]},{"name":"abstract fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","description":"usecase.repository.SurgicalProcessRepository.deleteSurgicalProcess","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/delete-surgical-process.html","searchKeys":["deleteSurgicalProcess","abstract fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","usecase.repository.SurgicalProcessRepository.deleteSurgicalProcess"]},{"name":"abstract fun execute(): T","description":"application.service.ApplicationService.execute","location":"surgical-process-monitoring-microservice/application.service/-application-service/execute.html","searchKeys":["execute","abstract fun execute(): T","application.service.ApplicationService.execute"]},{"name":"abstract fun execute(): X","description":"usecase.UseCase.execute","location":"surgical-process-monitoring-microservice/usecase/-use-case/execute.html","searchKeys":["execute","abstract fun execute(): X","usecase.UseCase.execute"]},{"name":"abstract fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","description":"application.controller.manager.MedicalDeviceDigitalTwinManager.findSurgicalProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-digital-twin-manager/find-surgical-process-by-medical-technology.html","searchKeys":["findSurgicalProcessByMedicalTechnology","abstract fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","application.controller.manager.MedicalDeviceDigitalTwinManager.findSurgicalProcessByMedicalTechnology"]},{"name":"abstract fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","description":"usecase.repository.MedicalDeviceRepository.findSurgicalProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/find-surgical-process-by-medical-technology.html","searchKeys":["findSurgicalProcessByMedicalTechnology","abstract fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","usecase.repository.MedicalDeviceRepository.findSurgicalProcessByMedicalTechnology"]},{"name":"abstract fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","description":"application.controller.manager.PatientMedicalDataDatabaseManager.getCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-medical-data-database-manager/get-current-patient-medical-data.html","searchKeys":["getCurrentPatientMedicalData","abstract fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","application.controller.manager.PatientMedicalDataDatabaseManager.getCurrentPatientMedicalData"]},{"name":"abstract fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","description":"usecase.repository.PatientRepository.getCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/get-current-patient-medical-data.html","searchKeys":["getCurrentPatientMedicalData","abstract fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","usecase.repository.PatientRepository.getCurrentPatientMedicalData"]},{"name":"abstract fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","description":"usecase.repository.SurgicalProcessRepository.getCurrentSurgicalProcesses","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/get-current-surgical-processes.html","searchKeys":["getCurrentSurgicalProcesses","abstract fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","usecase.repository.SurgicalProcessRepository.getCurrentSurgicalProcesses"]},{"name":"abstract fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","description":"application.controller.manager.MedicalDeviceDigitalTwinManager.getMedicalDeviceById","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-digital-twin-manager/get-medical-device-by-id.html","searchKeys":["getMedicalDeviceById","abstract fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","application.controller.manager.MedicalDeviceDigitalTwinManager.getMedicalDeviceById"]},{"name":"abstract fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","description":"usecase.repository.MedicalDeviceRepository.getMedicalDeviceById","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/get-medical-device-by-id.html","searchKeys":["getMedicalDeviceById","abstract fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","usecase.repository.MedicalDeviceRepository.getMedicalDeviceById"]},{"name":"abstract fun getMedicalDeviceTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","description":"application.controller.manager.MedicalDeviceDatabaseManager.getMedicalDeviceTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-database-manager/get-medical-device-technology-usage-by-process-id.html","searchKeys":["getMedicalDeviceTechnologyUsageByProcessId","abstract fun getMedicalDeviceTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","application.controller.manager.MedicalDeviceDatabaseManager.getMedicalDeviceTechnologyUsageByProcessId"]},{"name":"abstract fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","description":"application.controller.manager.MedicalDeviceDatabaseManager.getMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-database-manager/get-medical-device-usage-by-process-id.html","searchKeys":["getMedicalDeviceUsageByProcessId","abstract fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","application.controller.manager.MedicalDeviceDatabaseManager.getMedicalDeviceUsageByProcessId"]},{"name":"abstract fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","description":"usecase.repository.MedicalDeviceRepository.getMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/get-medical-device-usage-by-process-id.html","searchKeys":["getMedicalDeviceUsageByProcessId","abstract fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","usecase.repository.MedicalDeviceRepository.getMedicalDeviceUsageByProcessId"]},{"name":"abstract fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","description":"application.controller.manager.MedicalDeviceDigitalTwinManager.getMedicalTechnologyById","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-digital-twin-manager/get-medical-technology-by-id.html","searchKeys":["getMedicalTechnologyById","abstract fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","application.controller.manager.MedicalDeviceDigitalTwinManager.getMedicalTechnologyById"]},{"name":"abstract fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","description":"usecase.repository.MedicalDeviceRepository.getMedicalTechnologyById","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/get-medical-technology-by-id.html","searchKeys":["getMedicalTechnologyById","abstract fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","usecase.repository.MedicalDeviceRepository.getMedicalTechnologyById"]},{"name":"abstract fun getMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","description":"usecase.repository.MedicalDeviceRepository.getMedicalTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/get-medical-technology-usage-by-process-id.html","searchKeys":["getMedicalTechnologyUsageByProcessId","abstract fun getMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","usecase.repository.MedicalDeviceRepository.getMedicalTechnologyUsageByProcessId"]},{"name":"abstract fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","description":"application.controller.manager.PatientMedicalDataDatabaseManager.getPatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-medical-data-database-manager/get-patient-medical-data.html","searchKeys":["getPatientMedicalData","abstract fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","application.controller.manager.PatientMedicalDataDatabaseManager.getPatientMedicalData"]},{"name":"abstract fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","description":"usecase.repository.PatientRepository.getPatientMedicalData","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/get-patient-medical-data.html","searchKeys":["getPatientMedicalData","abstract fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","usecase.repository.PatientRepository.getPatientMedicalData"]},{"name":"abstract fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","description":"application.controller.manager.PatientDigitalTwinManager.getPatientTaxCode","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-digital-twin-manager/get-patient-tax-code.html","searchKeys":["getPatientTaxCode","abstract fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","application.controller.manager.PatientDigitalTwinManager.getPatientTaxCode"]},{"name":"abstract fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","description":"usecase.repository.PatientRepository.getPatientTaxCode","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/get-patient-tax-code.html","searchKeys":["getPatientTaxCode","abstract fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","usecase.repository.PatientRepository.getPatientTaxCode"]},{"name":"abstract fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","description":"application.controller.manager.SurgeryBookingDigitalTwinManager.getSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/application.controller.manager/-surgery-booking-digital-twin-manager/get-surgery-booking-by-patient.html","searchKeys":["getSurgeryBookingByPatient","abstract fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","application.controller.manager.SurgeryBookingDigitalTwinManager.getSurgeryBookingByPatient"]},{"name":"abstract fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","description":"usecase.repository.BookingRepository.getSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/usecase.repository/-booking-repository/get-surgery-booking-by-patient.html","searchKeys":["getSurgeryBookingByPatient","abstract fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","usecase.repository.BookingRepository.getSurgeryBookingByPatient"]},{"name":"abstract fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","description":"usecase.repository.SurgicalProcessRepository.getSurgicalProcessById","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/get-surgical-process-by-id.html","searchKeys":["getSurgicalProcessById","abstract fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","usecase.repository.SurgicalProcessRepository.getSurgicalProcessById"]},{"name":"abstract fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","description":"usecase.repository.SurgicalProcessRepository.getSurgicalProcessStates","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/get-surgical-process-states.html","searchKeys":["getSurgicalProcessStates","abstract fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","usecase.repository.SurgicalProcessRepository.getSurgicalProcessStates"]},{"name":"abstract fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","description":"usecase.repository.SurgicalProcessRepository.getSurgicalProcessSteps","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/get-surgical-process-steps.html","searchKeys":["getSurgicalProcessSteps","abstract fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","usecase.repository.SurgicalProcessRepository.getSurgicalProcessSteps"]},{"name":"abstract fun produceEvent(event: Event<*>)","description":"application.controller.manager.EventProducer.produceEvent","location":"surgical-process-monitoring-microservice/application.controller.manager/-event-producer/produce-event.html","searchKeys":["produceEvent","abstract fun produceEvent(event: Event<*>)","application.controller.manager.EventProducer.produceEvent"]},{"name":"abstract fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"application.controller.manager.SurgeryBookingDigitalTwinManager.removePatientSurgeryBookingMapping","location":"surgical-process-monitoring-microservice/application.controller.manager/-surgery-booking-digital-twin-manager/remove-patient-surgery-booking-mapping.html","searchKeys":["removePatientSurgeryBookingMapping","abstract fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","application.controller.manager.SurgeryBookingDigitalTwinManager.removePatientSurgeryBookingMapping"]},{"name":"abstract fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"usecase.repository.BookingRepository.removePatientSurgeryBookingMapping","location":"surgical-process-monitoring-microservice/usecase.repository/-booking-repository/remove-patient-surgery-booking-mapping.html","searchKeys":["removePatientSurgeryBookingMapping","abstract fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","usecase.repository.BookingRepository.removePatientSurgeryBookingMapping"]},{"name":"abstract fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","description":"application.controller.manager.PatientMedicalDataDatabaseManager.updatePatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-medical-data-database-manager/update-patient-medical-data.html","searchKeys":["updatePatientMedicalData","abstract fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","application.controller.manager.PatientMedicalDataDatabaseManager.updatePatientMedicalData"]},{"name":"abstract fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","description":"usecase.repository.PatientRepository.updatePatientMedicalData","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/update-patient-medical-data.html","searchKeys":["updatePatientMedicalData","abstract fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","usecase.repository.PatientRepository.updatePatientMedicalData"]},{"name":"abstract fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","description":"application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/update-surgical-process-room.html","searchKeys":["updateSurgicalProcessRoom","abstract fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessRoom"]},{"name":"abstract fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","description":"usecase.repository.SurgicalProcessRepository.updateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/update-surgical-process-room.html","searchKeys":["updateSurgicalProcessRoom","abstract fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","usecase.repository.SurgicalProcessRepository.updateSurgicalProcessRoom"]},{"name":"abstract fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","description":"usecase.repository.SurgicalProcessRepository.updateSurgicalProcessState","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/update-surgical-process-state.html","searchKeys":["updateSurgicalProcessState","abstract fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","usecase.repository.SurgicalProcessRepository.updateSurgicalProcessState"]},{"name":"abstract fun updateSurgicalProcessState(processId: ProcessData.ProcessId, state: ProcessData.ProcessState): Boolean","description":"application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessState","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/update-surgical-process-state.html","searchKeys":["updateSurgicalProcessState","abstract fun updateSurgicalProcessState(processId: ProcessData.ProcessId, state: ProcessData.ProcessState): Boolean","application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessState"]},{"name":"abstract fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","description":"usecase.repository.SurgicalProcessRepository.updateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/update-surgical-process-step.html","searchKeys":["updateSurgicalProcessStep","abstract fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","usecase.repository.SurgicalProcessRepository.updateSurgicalProcessStep"]},{"name":"abstract fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, step: ProcessData.ProcessStep): Boolean","description":"application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/update-surgical-process-step.html","searchKeys":["updateSurgicalProcessStep","abstract fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, step: ProcessData.ProcessStep): Boolean","application.controller.manager.ProcessDigitalTwinManager.updateSurgicalProcessStep"]},{"name":"abstract val data: E","description":"application.presenter.event.model.Event.data","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-event/data.html","searchKeys":["data","abstract val data: E","application.presenter.event.model.Event.data"]},{"name":"abstract val dateTime: String","description":"application.presenter.event.model.Event.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-event/date-time.html","searchKeys":["dateTime","abstract val dateTime: String","application.presenter.event.model.Event.dateTime"]},{"name":"abstract val key: String","description":"application.presenter.event.model.Event.key","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-event/key.html","searchKeys":["key","abstract val key: String","application.presenter.event.model.Event.key"]},{"name":"abstract val medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager","description":"infrastructure.provider.ManagerProvider.medicalDeviceDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/medical-device-database-manager.html","searchKeys":["medicalDeviceDatabaseManager","abstract val medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager","infrastructure.provider.ManagerProvider.medicalDeviceDatabaseManager"]},{"name":"abstract val medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager","description":"infrastructure.provider.ManagerProvider.medicalDeviceDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/medical-device-digital-twin-manager.html","searchKeys":["medicalDeviceDigitalTwinManager","abstract val medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager","infrastructure.provider.ManagerProvider.medicalDeviceDigitalTwinManager"]},{"name":"abstract val patientDigitalTwinManager: PatientDigitalTwinManager","description":"infrastructure.provider.ManagerProvider.patientDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/patient-digital-twin-manager.html","searchKeys":["patientDigitalTwinManager","abstract val patientDigitalTwinManager: PatientDigitalTwinManager","infrastructure.provider.ManagerProvider.patientDigitalTwinManager"]},{"name":"abstract val patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager","description":"infrastructure.provider.ManagerProvider.patientMedicalDataDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/patient-medical-data-database-manager.html","searchKeys":["patientMedicalDataDatabaseManager","abstract val patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager","infrastructure.provider.ManagerProvider.patientMedicalDataDatabaseManager"]},{"name":"abstract val processDatabaseManager: ProcessDatabaseManager","description":"infrastructure.provider.ManagerProvider.processDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/process-database-manager.html","searchKeys":["processDatabaseManager","abstract val processDatabaseManager: ProcessDatabaseManager","infrastructure.provider.ManagerProvider.processDatabaseManager"]},{"name":"abstract val processDigitalTwinManager: ProcessDigitalTwinManager","description":"infrastructure.provider.ManagerProvider.processDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/process-digital-twin-manager.html","searchKeys":["processDigitalTwinManager","abstract val processDigitalTwinManager: ProcessDigitalTwinManager","infrastructure.provider.ManagerProvider.processDigitalTwinManager"]},{"name":"abstract val surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager","description":"infrastructure.provider.ManagerProvider.surgeryBookingDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/surgery-booking-digital-twin-manager.html","searchKeys":["surgeryBookingDigitalTwinManager","abstract val surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager","infrastructure.provider.ManagerProvider.surgeryBookingDigitalTwinManager"]},{"name":"class AddMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","description":"application.service.MedicalDeviceServices.AddMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-device-usage/index.html","searchKeys":["AddMedicalDeviceUsage","class AddMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","application.service.MedicalDeviceServices.AddMedicalDeviceUsage"]},{"name":"class AddMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","description":"application.service.MedicalDeviceServices.AddMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-technology-usage/index.html","searchKeys":["AddMedicalTechnologyUsage","class AddMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","application.service.MedicalDeviceServices.AddMedicalTechnologyUsage"]},{"name":"class AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/index.html","searchKeys":["AdtQuery","class AdtQuery","infrastructure.digitaltwin.query.AdtQuery"]},{"name":"class ApiRouter(provider: ManagerProvider)","description":"infrastructure.api.ApiRouter","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/index.html","searchKeys":["ApiRouter","class ApiRouter(provider: ManagerProvider)","infrastructure.api.ApiRouter"]},{"name":"class BodyTemperatureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-body-temperature-update-event-handler/index.html","searchKeys":["BodyTemperatureUpdateEventHandler","class BodyTemperatureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler"]},{"name":"class CreatePatient(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<Patient?> ","description":"application.service.PatientDataServices.CreatePatient","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-create-patient/index.html","searchKeys":["CreatePatient","class CreatePatient(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<Patient?> ","application.service.PatientDataServices.CreatePatient"]},{"name":"class CreateSurgicalProcess(surgicalProcess: SurgicalProcess, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<SurgicalProcess?> ","description":"application.service.SurgicalProcessServices.CreateSurgicalProcess","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-create-surgical-process/index.html","searchKeys":["CreateSurgicalProcess","class CreateSurgicalProcess(surgicalProcess: SurgicalProcess, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<SurgicalProcess?> ","application.service.SurgicalProcessServices.CreateSurgicalProcess"]},{"name":"class DatabaseManager(connectionString: String) : MedicalDeviceDatabaseManager, PatientMedicalDataDatabaseManager, ProcessDatabaseManager","description":"infrastructure.database.DatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/index.html","searchKeys":["DatabaseManager","class DatabaseManager(connectionString: String) : MedicalDeviceDatabaseManager, PatientMedicalDataDatabaseManager, ProcessDatabaseManager","infrastructure.database.DatabaseManager"]},{"name":"class DeleteImplantableMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","description":"application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-delete-implantable-medical-device/index.html","searchKeys":["DeleteImplantableMedicalDevice","class DeleteImplantableMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<Boolean> ","application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice"]},{"name":"class DeletePatient(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<Boolean> ","description":"application.service.PatientDataServices.DeletePatient","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-delete-patient/index.html","searchKeys":["DeletePatient","class DeletePatient(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<Boolean> ","application.service.PatientDataServices.DeletePatient"]},{"name":"class DeleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId, surgeryBookingRepository: BookingRepository) : ApplicationService<Boolean> ","description":"application.service.SurgeryBookingServices.DeleteSurgeryBooking","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-delete-surgery-booking/index.html","searchKeys":["DeleteSurgeryBooking","class DeleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId, surgeryBookingRepository: BookingRepository) : ApplicationService<Boolean> ","application.service.SurgeryBookingServices.DeleteSurgeryBooking"]},{"name":"class DeleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","description":"application.service.SurgicalProcessServices.DeleteSurgicalProcess","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-delete-surgical-process/index.html","searchKeys":["DeleteSurgicalProcess","class DeleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","application.service.SurgicalProcessServices.DeleteSurgicalProcess"]},{"name":"class DiastolicPressureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-diastolic-pressure-update-event-handler/index.html","searchKeys":["DiastolicPressureUpdateEventHandler","class DiastolicPressureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler"]},{"name":"class DigitalTwinManager : MedicalDeviceDigitalTwinManager, PatientDigitalTwinManager, ProcessDigitalTwinManager, SurgeryBookingDigitalTwinManager","description":"infrastructure.digitaltwin.DigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/index.html","searchKeys":["DigitalTwinManager","class DigitalTwinManager : MedicalDeviceDigitalTwinManager, PatientDigitalTwinManager, ProcessDigitalTwinManager, SurgeryBookingDigitalTwinManager","infrastructure.digitaltwin.DigitalTwinManager"]},{"name":"class EmergencySurgeryEventHandler(surgicalProcessRepository: SurgicalProcessRepository, patientRepository: PatientRepository) : EventHandler","description":"application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-emergency-surgery-event-handler/index.html","searchKeys":["EmergencySurgeryEventHandler","class EmergencySurgeryEventHandler(surgicalProcessRepository: SurgicalProcessRepository, patientRepository: PatientRepository) : EventHandler","application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler"]},{"name":"class FindProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<ProcessData.ProcessId?> ","description":"application.service.MedicalDeviceServices.FindProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-find-process-by-medical-technology/index.html","searchKeys":["FindProcessByMedicalTechnology","class FindProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<ProcessData.ProcessId?> ","application.service.MedicalDeviceServices.FindProcessByMedicalTechnology"]},{"name":"class GetCurrentPatientMedicalData(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<PatientData.MedicalData?> ","description":"application.service.PatientDataServices.GetCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-current-patient-medical-data/index.html","searchKeys":["GetCurrentPatientMedicalData","class GetCurrentPatientMedicalData(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<PatientData.MedicalData?> ","application.service.PatientDataServices.GetCurrentPatientMedicalData"]},{"name":"class GetCurrentSurgicalProcesses(surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Set<SurgicalProcess>> ","description":"application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-current-surgical-processes/index.html","searchKeys":["GetCurrentSurgicalProcesses","class GetCurrentSurgicalProcesses(surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Set<SurgicalProcess>> ","application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses"]},{"name":"class GetMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<ImplantableMedicalDevice?> ","description":"application.service.MedicalDeviceServices.GetMedicalDeviceById","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-by-id/index.html","searchKeys":["GetMedicalDeviceById","class GetMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<ImplantableMedicalDevice?> ","application.service.MedicalDeviceServices.GetMedicalDeviceById"]},{"name":"class GetMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<List<MedicalDeviceData.ImplantableMedicalDeviceId>> ","description":"application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-usage-by-process-id/index.html","searchKeys":["GetMedicalDeviceUsageByProcessId","class GetMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<List<MedicalDeviceData.ImplantableMedicalDeviceId>> ","application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId"]},{"name":"class GetMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository, inUse: Boolean) : ApplicationService<MedicalTechnology?> ","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyById","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-by-id/index.html","searchKeys":["GetMedicalTechnologyById","class GetMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository, inUse: Boolean) : ApplicationService<MedicalTechnology?> ","application.service.MedicalDeviceServices.GetMedicalTechnologyById"]},{"name":"class GetMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>> ","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-usage-by-process-id/index.html","searchKeys":["GetMedicalTechnologyUsageByProcessId","class GetMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository) : ApplicationService<List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>> ","application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId"]},{"name":"class GetPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant, patientRepository: PatientRepository) : ApplicationService<List<Pair<Instant, PatientData.MedicalData>>> ","description":"application.service.PatientDataServices.GetPatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-medical-data/index.html","searchKeys":["GetPatientMedicalData","class GetPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant, patientRepository: PatientRepository) : ApplicationService<List<Pair<Instant, PatientData.MedicalData>>> ","application.service.PatientDataServices.GetPatientMedicalData"]},{"name":"class GetPatientTaxCode(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<PatientData.TaxCode?> ","description":"application.service.PatientDataServices.GetPatientTaxCode","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-tax-code/index.html","searchKeys":["GetPatientTaxCode","class GetPatientTaxCode(patientId: PatientData.PatientId, patientRepository: PatientRepository) : ApplicationService<PatientData.TaxCode?> ","application.service.PatientDataServices.GetPatientTaxCode"]},{"name":"class GetSurgeryBookingByPatient(patientId: PatientData.PatientId, surgeryBookingRepository: BookingRepository) : ApplicationService<SurgeryBooking?> ","description":"application.service.SurgeryBookingServices.GetSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-get-surgery-booking-by-patient/index.html","searchKeys":["GetSurgeryBookingByPatient","class GetSurgeryBookingByPatient(patientId: PatientData.PatientId, surgeryBookingRepository: BookingRepository) : ApplicationService<SurgeryBooking?> ","application.service.SurgeryBookingServices.GetSurgeryBookingByPatient"]},{"name":"class GetSurgicalProcessById(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<SurgicalProcess?> ","description":"application.service.SurgicalProcessServices.GetSurgicalProcessById","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-by-id/index.html","searchKeys":["GetSurgicalProcessById","class GetSurgicalProcessById(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<SurgicalProcess?> ","application.service.SurgicalProcessServices.GetSurgicalProcessById"]},{"name":"class GetSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<List<Pair<Instant, ProcessData.ProcessState>>> ","description":"application.service.SurgicalProcessServices.GetSurgicalProcessStates","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-states/index.html","searchKeys":["GetSurgicalProcessStates","class GetSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<List<Pair<Instant, ProcessData.ProcessState>>> ","application.service.SurgicalProcessServices.GetSurgicalProcessStates"]},{"name":"class GetSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<List<Pair<Instant, ProcessData.ProcessStep>>> ","description":"application.service.SurgicalProcessServices.GetSurgicalProcessSteps","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-steps/index.html","searchKeys":["GetSurgicalProcessSteps","class GetSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<List<Pair<Instant, ProcessData.ProcessStep>>> ","application.service.SurgicalProcessServices.GetSurgicalProcessSteps"]},{"name":"class HeartbeatUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-heartbeat-update-event-handler/index.html","searchKeys":["HeartbeatUpdateEventHandler","class HeartbeatUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler"]},{"name":"class KafkaClient(provider: ManagerProvider) : EventProducer","description":"infrastructure.event.KafkaClient","location":"surgical-process-monitoring-microservice/infrastructure.event/-kafka-client/index.html","searchKeys":["KafkaClient","class KafkaClient(provider: ManagerProvider) : EventProducer","infrastructure.event.KafkaClient"]},{"name":"class ManagerProviderImpl : ManagerProvider","description":"infrastructure.provider.ManagerProviderImpl","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/index.html","searchKeys":["ManagerProviderImpl","class ManagerProviderImpl : ManagerProvider","infrastructure.provider.ManagerProviderImpl"]},{"name":"class MedicalDeviceController(medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager, medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager) : MedicalDeviceRepository","description":"application.controller.MedicalDeviceController","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/index.html","searchKeys":["MedicalDeviceController","class MedicalDeviceController(medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager, medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager) : MedicalDeviceRepository","application.controller.MedicalDeviceController"]},{"name":"class MedicalDeviceUsageEventHandler(medicalDeviceRepository: MedicalDeviceRepository) : EventHandler","description":"application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-device-usage-event-handler/index.html","searchKeys":["MedicalDeviceUsageEventHandler","class MedicalDeviceUsageEventHandler(medicalDeviceRepository: MedicalDeviceRepository) : EventHandler","application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler"]},{"name":"class MedicalTechnologyUsageEventHandler(medicalDeviceRepository: MedicalDeviceRepository) : EventHandler","description":"application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-technology-usage-event-handler/index.html","searchKeys":["MedicalTechnologyUsageEventHandler","class MedicalTechnologyUsageEventHandler(medicalDeviceRepository: MedicalDeviceRepository) : EventHandler","application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler"]},{"name":"class PatientDataController(patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager, patientDigitalTwinManager: PatientDigitalTwinManager) : PatientRepository","description":"application.controller.PatientDataController","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/index.html","searchKeys":["PatientDataController","class PatientDataController(patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager, patientDigitalTwinManager: PatientDigitalTwinManager) : PatientRepository","application.controller.PatientDataController"]},{"name":"class PatientOnOperatingTableEventHandler(surgicalProcessRepository: SurgicalProcessRepository) : EventHandler","description":"application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-patient-on-operating-table-event-handler/index.html","searchKeys":["PatientOnOperatingTableEventHandler","class PatientOnOperatingTableEventHandler(surgicalProcessRepository: SurgicalProcessRepository) : EventHandler","application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler"]},{"name":"class PatientTrackedEventHandler(surgicalProcessRepository: SurgicalProcessRepository, surgeryBookingRepository: BookingRepository, patientRepository: PatientRepository, medicalDeviceRepository: MedicalDeviceRepository, eventProducer: EventProducer) : EventHandler","description":"application.handler.ProcessEventHandlers.PatientTrackedEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-patient-tracked-event-handler/index.html","searchKeys":["PatientTrackedEventHandler","class PatientTrackedEventHandler(surgicalProcessRepository: SurgicalProcessRepository, surgeryBookingRepository: BookingRepository, patientRepository: PatientRepository, medicalDeviceRepository: MedicalDeviceRepository, eventProducer: EventProducer) : EventHandler","application.handler.ProcessEventHandlers.PatientTrackedEventHandler"]},{"name":"class ProcessManualEventHandler(surgicalProcessRepository: SurgicalProcessRepository) : EventHandler","description":"application.handler.ProcessEventHandlers.ProcessManualEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-process-manual-event-handler/index.html","searchKeys":["ProcessManualEventHandler","class ProcessManualEventHandler(surgicalProcessRepository: SurgicalProcessRepository) : EventHandler","application.handler.ProcessEventHandlers.ProcessManualEventHandler"]},{"name":"class RespiratoryRateUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-respiratory-rate-update-event-handler/index.html","searchKeys":["RespiratoryRateUpdateEventHandler","class RespiratoryRateUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler"]},{"name":"class SaturationUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.SaturationUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-saturation-update-event-handler/index.html","searchKeys":["SaturationUpdateEventHandler","class SaturationUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.SaturationUpdateEventHandler"]},{"name":"class SurgeryBookingController(surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager) : BookingRepository","description":"application.controller.SurgeryBookingController","location":"surgical-process-monitoring-microservice/application.controller/-surgery-booking-controller/index.html","searchKeys":["SurgeryBookingController","class SurgeryBookingController(surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager) : BookingRepository","application.controller.SurgeryBookingController"]},{"name":"class SurgicalProcessController(processDatabaseManager: ProcessDatabaseManager, processDigitalTwinManager: ProcessDigitalTwinManager) : SurgicalProcessRepository","description":"application.controller.SurgicalProcessController","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/index.html","searchKeys":["SurgicalProcessController","class SurgicalProcessController(processDatabaseManager: ProcessDatabaseManager, processDigitalTwinManager: ProcessDigitalTwinManager) : SurgicalProcessRepository","application.controller.SurgicalProcessController"]},{"name":"class SystolicPressureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","description":"application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-systolic-pressure-update-event-handler/index.html","searchKeys":["SystolicPressureUpdateEventHandler","class SystolicPressureUpdateEventHandler(patientRepository: PatientRepository) : EventHandler","application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler"]},{"name":"class UpdatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant, patientRepository: PatientRepository) : ApplicationService<Boolean> ","description":"application.service.PatientDataServices.UpdatePatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-update-patient-medical-data/index.html","searchKeys":["UpdatePatientMedicalData","class UpdatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant, patientRepository: PatientRepository) : ApplicationService<Boolean> ","application.service.PatientDataServices.UpdatePatientMedicalData"]},{"name":"class UpdateSurgicalProcessRoom(surgicalProcessId: ProcessData.ProcessId, latestRoomId: String?, room: Room, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-room/index.html","searchKeys":["UpdateSurgicalProcessRoom","class UpdateSurgicalProcessRoom(surgicalProcessId: ProcessData.ProcessId, latestRoomId: String?, room: Room, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom"]},{"name":"class UpdateSurgicalProcessState(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessState","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-state/index.html","searchKeys":["UpdateSurgicalProcessState","class UpdateSurgicalProcessState(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","application.service.SurgicalProcessServices.UpdateSurgicalProcessState"]},{"name":"class UpdateSurgicalProcessStep(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-step/index.html","searchKeys":["UpdateSurgicalProcessStep","class UpdateSurgicalProcessStep(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep, surgicalProcessRepository: SurgicalProcessRepository) : ApplicationService<Boolean> ","application.service.SurgicalProcessServices.UpdateSurgicalProcessStep"]},{"name":"const val BOOKING_RELATIONSHIP: String","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt.BOOKING_RELATIONSHIP","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/-b-o-o-k-i-n-g_-r-e-l-a-t-i-o-n-s-h-i-p.html","searchKeys":["BOOKING_RELATIONSHIP","const val BOOKING_RELATIONSHIP: String","infrastructure.digitaltwin.presenter.SurgicalProcessAdt.BOOKING_RELATIONSHIP"]},{"name":"const val EMERGENCY_SURGERY_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.EMERGENCY_SURGERY_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-e-m-e-r-g-e-n-c-y_-s-u-r-g-e-r-y_-e-v-e-n-t.html","searchKeys":["EMERGENCY_SURGERY_EVENT","const val EMERGENCY_SURGERY_EVENT: String","application.presenter.event.model.ProcessEventsKeys.EMERGENCY_SURGERY_EVENT"]},{"name":"const val MEDICAL_DEVICE_USAGE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.MEDICAL_DEVICE_USAGE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-m-e-d-i-c-a-l_-d-e-v-i-c-e_-u-s-a-g-e_-e-v-e-n-t.html","searchKeys":["MEDICAL_DEVICE_USAGE_EVENT","const val MEDICAL_DEVICE_USAGE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.MEDICAL_DEVICE_USAGE_EVENT"]},{"name":"const val MEDICAL_TECHNOLOGY_USAGE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.MEDICAL_TECHNOLOGY_USAGE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-m-e-d-i-c-a-l_-t-e-c-h-n-o-l-o-g-y_-u-s-a-g-e_-e-v-e-n-t.html","searchKeys":["MEDICAL_TECHNOLOGY_USAGE_EVENT","const val MEDICAL_TECHNOLOGY_USAGE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.MEDICAL_TECHNOLOGY_USAGE_EVENT"]},{"name":"const val NETTY_PORT: Int = 3000","description":"infrastructure.api.ApiRouter.Companion.NETTY_PORT","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/-companion/-n-e-t-t-y_-p-o-r-t.html","searchKeys":["NETTY_PORT","const val NETTY_PORT: Int = 3000","infrastructure.api.ApiRouter.Companion.NETTY_PORT"]},{"name":"const val PATIENT_BODY_TEMPERATURE_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_BODY_TEMPERATURE_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-b-o-d-y_-t-e-m-p-e-r-a-t-u-r-e_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_BODY_TEMPERATURE_UPDATE_EVENT","const val PATIENT_BODY_TEMPERATURE_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_BODY_TEMPERATURE_UPDATE_EVENT"]},{"name":"const val PATIENT_DIASTOLIC_PRESSURE_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_DIASTOLIC_PRESSURE_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-d-i-a-s-t-o-l-i-c_-p-r-e-s-s-u-r-e_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_DIASTOLIC_PRESSURE_UPDATE_EVENT","const val PATIENT_DIASTOLIC_PRESSURE_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_DIASTOLIC_PRESSURE_UPDATE_EVENT"]},{"name":"const val PATIENT_HEALTCAREUSER_RELATIONSHIP: String","description":"infrastructure.digitaltwin.presenter.SurgeryBookingAdt.PATIENT_HEALTCAREUSER_RELATIONSHIP","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgery-booking-adt/-p-a-t-i-e-n-t_-h-e-a-l-t-c-a-r-e-u-s-e-r_-r-e-l-a-t-i-o-n-s-h-i-p.html","searchKeys":["PATIENT_HEALTCAREUSER_RELATIONSHIP","const val PATIENT_HEALTCAREUSER_RELATIONSHIP: String","infrastructure.digitaltwin.presenter.SurgeryBookingAdt.PATIENT_HEALTCAREUSER_RELATIONSHIP"]},{"name":"const val PATIENT_HEARTBEAT_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_HEARTBEAT_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-h-e-a-r-t-b-e-a-t_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_HEARTBEAT_UPDATE_EVENT","const val PATIENT_HEARTBEAT_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_HEARTBEAT_UPDATE_EVENT"]},{"name":"const val PATIENT_ON_OB_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_ON_OB_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-o-n_-o-b_-e-v-e-n-t.html","searchKeys":["PATIENT_ON_OB_EVENT","const val PATIENT_ON_OB_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_ON_OB_EVENT"]},{"name":"const val PATIENT_RELATIONSHIP: String","description":"infrastructure.digitaltwin.presenter.SurgeryBookingAdt.PATIENT_RELATIONSHIP","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgery-booking-adt/-p-a-t-i-e-n-t_-r-e-l-a-t-i-o-n-s-h-i-p.html","searchKeys":["PATIENT_RELATIONSHIP","const val PATIENT_RELATIONSHIP: String","infrastructure.digitaltwin.presenter.SurgeryBookingAdt.PATIENT_RELATIONSHIP"]},{"name":"const val PATIENT_RELATIONSHIP: String","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt.PATIENT_RELATIONSHIP","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/-p-a-t-i-e-n-t_-r-e-l-a-t-i-o-n-s-h-i-p.html","searchKeys":["PATIENT_RELATIONSHIP","const val PATIENT_RELATIONSHIP: String","infrastructure.digitaltwin.presenter.SurgicalProcessAdt.PATIENT_RELATIONSHIP"]},{"name":"const val PATIENT_RESPIRATORY_RATE_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_RESPIRATORY_RATE_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-r-e-s-p-i-r-a-t-o-r-y_-r-a-t-e_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_RESPIRATORY_RATE_UPDATE_EVENT","const val PATIENT_RESPIRATORY_RATE_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_RESPIRATORY_RATE_UPDATE_EVENT"]},{"name":"const val PATIENT_SATURATION_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_SATURATION_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-s-a-t-u-r-a-t-i-o-n_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_SATURATION_UPDATE_EVENT","const val PATIENT_SATURATION_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_SATURATION_UPDATE_EVENT"]},{"name":"const val PATIENT_SYSTOLIC_PRESSURE_UPDATE_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_SYSTOLIC_PRESSURE_UPDATE_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-s-y-s-t-o-l-i-c_-p-r-e-s-s-u-r-e_-u-p-d-a-t-e_-e-v-e-n-t.html","searchKeys":["PATIENT_SYSTOLIC_PRESSURE_UPDATE_EVENT","const val PATIENT_SYSTOLIC_PRESSURE_UPDATE_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_SYSTOLIC_PRESSURE_UPDATE_EVENT"]},{"name":"const val PATIENT_TRACKED_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PATIENT_TRACKED_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-a-t-i-e-n-t_-t-r-a-c-k-e-d_-e-v-e-n-t.html","searchKeys":["PATIENT_TRACKED_EVENT","const val PATIENT_TRACKED_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PATIENT_TRACKED_EVENT"]},{"name":"const val PROCESS_MANUAL_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.PROCESS_MANUAL_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-p-r-o-c-e-s-s_-m-a-n-u-a-l_-e-v-e-n-t.html","searchKeys":["PROCESS_MANUAL_EVENT","const val PROCESS_MANUAL_EVENT: String","application.presenter.event.model.ProcessEventsKeys.PROCESS_MANUAL_EVENT"]},{"name":"const val ROOM_RELATIONSHIP: String","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt.ROOM_RELATIONSHIP","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/-r-o-o-m_-r-e-l-a-t-i-o-n-s-h-i-p.html","searchKeys":["ROOM_RELATIONSHIP","const val ROOM_RELATIONSHIP: String","infrastructure.digitaltwin.presenter.SurgicalProcessAdt.ROOM_RELATIONSHIP"]},{"name":"const val SURGERY_REPORT_EVENT: String","description":"application.presenter.event.model.ProcessEventsKeys.SURGERY_REPORT_EVENT","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/-s-u-r-g-e-r-y_-r-e-p-o-r-t_-e-v-e-n-t.html","searchKeys":["SURGERY_REPORT_EVENT","const val SURGERY_REPORT_EVENT: String","application.presenter.event.model.ProcessEventsKeys.SURGERY_REPORT_EVENT"]},{"name":"const val SURGICAL_PROCESS_MODEL: String","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt.SURGICAL_PROCESS_MODEL","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/-s-u-r-g-i-c-a-l_-p-r-o-c-e-s-s_-m-o-d-e-l.html","searchKeys":["SURGICAL_PROCESS_MODEL","const val SURGICAL_PROCESS_MODEL: String","infrastructure.digitaltwin.presenter.SurgicalProcessAdt.SURGICAL_PROCESS_MODEL"]},{"name":"constructor()","description":"infrastructure.digitaltwin.DigitalTwinManager.DigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/-digital-twin-manager.html","searchKeys":["DigitalTwinManager","constructor()","infrastructure.digitaltwin.DigitalTwinManager.DigitalTwinManager"]},{"name":"constructor()","description":"infrastructure.provider.ManagerProviderImpl.ManagerProviderImpl","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/-manager-provider-impl.html","searchKeys":["ManagerProviderImpl","constructor()","infrastructure.provider.ManagerProviderImpl.ManagerProviderImpl"]},{"name":"constructor(bookingId: SurgeryBookingData.SurgeryBookingId, surgeryBookingRepository: BookingRepository)","description":"application.service.SurgeryBookingServices.DeleteSurgeryBooking.DeleteSurgeryBooking","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-delete-surgery-booking/-delete-surgery-booking.html","searchKeys":["DeleteSurgeryBooking","constructor(bookingId: SurgeryBookingData.SurgeryBookingId, surgeryBookingRepository: BookingRepository)","application.service.SurgeryBookingServices.DeleteSurgeryBooking.DeleteSurgeryBooking"]},{"name":"constructor(bpm: Int)","description":"entity.patient.PatientData.HeartBeat.HeartBeat","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-heart-beat/-heart-beat.html","searchKeys":["HeartBeat","constructor(bpm: Int)","entity.patient.PatientData.HeartBeat.HeartBeat"]},{"name":"constructor(code: String)","description":"entity.patient.PatientData.TaxCode.TaxCode","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-tax-code/-tax-code.html","searchKeys":["TaxCode","constructor(code: String)","entity.patient.PatientData.TaxCode.TaxCode"]},{"name":"constructor(connectionString: String)","description":"infrastructure.database.DatabaseManager.DatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/-database-manager.html","searchKeys":["DatabaseManager","constructor(connectionString: String)","infrastructure.database.DatabaseManager.DatabaseManager"]},{"name":"constructor(dateTime: Instant, metadata: TimeSeriesMedicalTechnologyUsageMetadata, value: Boolean)","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.TimeSeriesMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage/-time-series-medical-technology-usage.html","searchKeys":["TimeSeriesMedicalTechnologyUsage","constructor(dateTime: Instant, metadata: TimeSeriesMedicalTechnologyUsageMetadata, value: Boolean)","application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.TimeSeriesMedicalTechnologyUsage"]},{"name":"constructor(dateTime: Instant, metadata: TimeSeriesPatientMedicalDataMetadata, value: Double)","description":"application.presenter.database.model.TimeSeriesPatientMedicalData.TimeSeriesPatientMedicalData","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data/-time-series-patient-medical-data.html","searchKeys":["TimeSeriesPatientMedicalData","constructor(dateTime: Instant, metadata: TimeSeriesPatientMedicalDataMetadata, value: Double)","application.presenter.database.model.TimeSeriesPatientMedicalData.TimeSeriesPatientMedicalData"]},{"name":"constructor(dateTime: Instant, metadata: TimeSeriesProcessStateEventMetadata, value: ProcessData.ProcessState)","description":"application.presenter.database.model.TimeSeriesProcessStateEvent.TimeSeriesProcessStateEvent","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event/-time-series-process-state-event.html","searchKeys":["TimeSeriesProcessStateEvent","constructor(dateTime: Instant, metadata: TimeSeriesProcessStateEventMetadata, value: ProcessData.ProcessState)","application.presenter.database.model.TimeSeriesProcessStateEvent.TimeSeriesProcessStateEvent"]},{"name":"constructor(dateTime: Instant, metadata: TimeSeriesProcessStepEventMetadata, value: ProcessData.ProcessStep)","description":"application.presenter.database.model.TimeSeriesProcessStepEvent.TimeSeriesProcessStepEvent","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event/-time-series-process-step-event.html","searchKeys":["TimeSeriesProcessStepEvent","constructor(dateTime: Instant, metadata: TimeSeriesProcessStepEventMetadata, value: ProcessData.ProcessStep)","application.presenter.database.model.TimeSeriesProcessStepEvent.TimeSeriesProcessStepEvent"]},{"name":"constructor(degree: Double, unit: PatientData.TemperatureUnit = TemperatureUnit.CELSIUS)","description":"entity.patient.PatientData.BodyTemperature.BodyTemperature","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-body-temperature/-body-temperature.html","searchKeys":["BodyTemperature","constructor(degree: Double, unit: PatientData.TemperatureUnit = TemperatureUnit.CELSIUS)","entity.patient.PatientData.BodyTemperature.BodyTemperature"]},{"name":"constructor(entries: List<T>, total: Int = entries.count())","description":"infrastructure.api.util.ResponseEntryList.ResponseEntryList","location":"surgical-process-monitoring-microservice/infrastructure.api.util/-response-entry-list/-response-entry-list.html","searchKeys":["ResponseEntryList","constructor(entries: List<T>, total: Int = entries.count())","infrastructure.api.util.ResponseEntryList.ResponseEntryList"]},{"name":"constructor(heartBeat: PatientData.HeartBeat? = null, diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null, systolicBloodPressure: PatientData.SystolicBloodPressure? = null, respiratoryRate: PatientData.RespiratoryRate? = null, saturationPercentage: PatientData.SaturationPercentage? = null, bodyTemperature: PatientData.BodyTemperature? = null)","description":"entity.patient.PatientData.MedicalData.MedicalData","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/-medical-data.html","searchKeys":["MedicalData","constructor(heartBeat: PatientData.HeartBeat? = null, diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null, systolicBloodPressure: PatientData.SystolicBloodPressure? = null, respiratoryRate: PatientData.RespiratoryRate? = null, saturationPercentage: PatientData.SaturationPercentage? = null, bodyTemperature: PatientData.BodyTemperature? = null)","entity.patient.PatientData.MedicalData.MedicalData"]},{"name":"constructor(heartbeat: Int)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat.Heartbeat","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-heartbeat/-heartbeat.html","searchKeys":["Heartbeat","constructor(heartbeat: Int)","application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat.Heartbeat"]},{"name":"constructor(id: HealthProfessionalData.HealthProfessionalId, name: String? = null, surname: String? = null, role: HealthProfessionalData.HealthProfessionalRole = HealthProfessionalData.HealthProfessionalRole.SURGEON)","description":"entity.healthprofessional.HealthProfessional.HealthProfessional","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/-health-professional.html","searchKeys":["HealthProfessional","constructor(id: HealthProfessionalData.HealthProfessionalId, name: String? = null, surname: String? = null, role: HealthProfessionalData.HealthProfessionalRole = HealthProfessionalData.HealthProfessionalRole.SURGEON)","entity.healthprofessional.HealthProfessional.HealthProfessional"]},{"name":"constructor(id: MedicalDeviceData.ImplantableMedicalDeviceId, type: MedicalDeviceData.DeviceType)","description":"entity.medicaldevice.ImplantableMedicalDevice.ImplantableMedicalDevice","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/-implantable-medical-device.html","searchKeys":["ImplantableMedicalDevice","constructor(id: MedicalDeviceData.ImplantableMedicalDeviceId, type: MedicalDeviceData.DeviceType)","entity.medicaldevice.ImplantableMedicalDevice.ImplantableMedicalDevice"]},{"name":"constructor(id: MedicalDeviceData.MedicalTechnologyId, name: String, description: String? = null, type: MedicalDeviceData.MedicalTechnologyType, inUse: Boolean)","description":"entity.medicaldevice.MedicalTechnology.MedicalTechnology","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/-medical-technology.html","searchKeys":["MedicalTechnology","constructor(id: MedicalDeviceData.MedicalTechnologyId, name: String, description: String? = null, type: MedicalDeviceData.MedicalTechnologyType, inUse: Boolean)","entity.medicaldevice.MedicalTechnology.MedicalTechnology"]},{"name":"constructor(id: PatientData.PatientId, name: String? = null, surname: String? = null, medicalData: PatientData.MedicalData)","description":"entity.patient.Patient.Patient","location":"surgical-process-monitoring-microservice/entity.patient/-patient/-patient.html","searchKeys":["Patient","constructor(id: PatientData.PatientId, name: String? = null, surname: String? = null, medicalData: PatientData.MedicalData)","entity.patient.Patient.Patient"]},{"name":"constructor(id: ProcessData.ProcessId, dateTime: Instant, type: String, patientId: PatientData.PatientId, healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null, preOperatingRoom: Room? = null, operatingRoom: Room? = null, state: ProcessData.ProcessState, step: ProcessData.ProcessStep? = null)","description":"entity.process.SurgicalProcess.SurgicalProcess","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/-surgical-process.html","searchKeys":["SurgicalProcess","constructor(id: ProcessData.ProcessId, dateTime: Instant, type: String, patientId: PatientData.PatientId, healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null, preOperatingRoom: Room? = null, operatingRoom: Room? = null, state: ProcessData.ProcessState, step: ProcessData.ProcessStep? = null)","entity.process.SurgicalProcess.SurgicalProcess"]},{"name":"constructor(id: RoomData.RoomId, type: RoomData.RoomType)","description":"entity.room.Room.Room","location":"surgical-process-monitoring-microservice/entity.room/-room/-room.html","searchKeys":["Room","constructor(id: RoomData.RoomId, type: RoomData.RoomType)","entity.room.Room.Room"]},{"name":"constructor(id: String)","description":"entity.booking.SurgeryBookingData.SurgeryBookingId.SurgeryBookingId","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking-data/-surgery-booking-id/-surgery-booking-id.html","searchKeys":["SurgeryBookingId","constructor(id: String)","entity.booking.SurgeryBookingData.SurgeryBookingId.SurgeryBookingId"]},{"name":"constructor(id: String)","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalId.HealthProfessionalId","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-id/-health-professional-id.html","searchKeys":["HealthProfessionalId","constructor(id: String)","entity.healthprofessional.HealthProfessionalData.HealthProfessionalId.HealthProfessionalId"]},{"name":"constructor(id: String)","description":"entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId.ImplantableMedicalDeviceId","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-implantable-medical-device-id/-implantable-medical-device-id.html","searchKeys":["ImplantableMedicalDeviceId","constructor(id: String)","entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId.ImplantableMedicalDeviceId"]},{"name":"constructor(id: String)","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId.MedicalTechnologyId","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-id/-medical-technology-id.html","searchKeys":["MedicalTechnologyId","constructor(id: String)","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId.MedicalTechnologyId"]},{"name":"constructor(id: String)","description":"entity.patient.PatientData.PatientId.PatientId","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-patient-id/-patient-id.html","searchKeys":["PatientId","constructor(id: String)","entity.patient.PatientData.PatientId.PatientId"]},{"name":"constructor(id: String)","description":"entity.process.ProcessData.ProcessId.ProcessId","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-id/-process-id.html","searchKeys":["ProcessId","constructor(id: String)","entity.process.ProcessData.ProcessId.ProcessId"]},{"name":"constructor(id: String)","description":"entity.room.RoomData.RoomId.RoomId","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-id/-room-id.html","searchKeys":["RoomId","constructor(id: String)","entity.room.RoomData.RoomId.RoomId"]},{"name":"constructor(id: SurgeryBookingData.SurgeryBookingId, dateTime: Instant, healthProfessionalId: HealthProfessionalData.HealthProfessionalId, patientId: PatientData.PatientId, surgeryType: String)","description":"entity.booking.SurgeryBooking.SurgeryBooking","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/-surgery-booking.html","searchKeys":["SurgeryBooking","constructor(id: SurgeryBookingData.SurgeryBookingId, dateTime: Instant, healthProfessionalId: HealthProfessionalData.HealthProfessionalId, patientId: PatientData.PatientId, surgeryType: String)","entity.booking.SurgeryBooking.SurgeryBooking"]},{"name":"constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice.DeleteImplantableMedicalDevice","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-delete-implantable-medical-device/-delete-implantable-medical-device.html","searchKeys":["DeleteImplantableMedicalDevice","constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice.DeleteImplantableMedicalDevice"]},{"name":"constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.GetMedicalDeviceById.GetMedicalDeviceById","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-by-id/-get-medical-device-by-id.html","searchKeys":["GetMedicalDeviceById","constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.GetMedicalDeviceById.GetMedicalDeviceById"]},{"name":"constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId)","description":"application.presenter.database.model.MedicalDeviceUsage.MedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-device-usage/-medical-device-usage.html","searchKeys":["MedicalDeviceUsage","constructor(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId)","application.presenter.database.model.MedicalDeviceUsage.MedicalDeviceUsage"]},{"name":"constructor(key: String = ProcessEventsKeys.SURGERY_REPORT_EVENT, dateTime: String, data: E)","description":"application.presenter.event.model.SurgeryReportEvent.SurgeryReportEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-surgery-report-event/-surgery-report-event.html","searchKeys":["SurgeryReportEvent","constructor(key: String = ProcessEventsKeys.SURGERY_REPORT_EVENT, dateTime: String, data: E)","application.presenter.event.model.SurgeryReportEvent.SurgeryReportEvent"]},{"name":"constructor(key: String, data: E, dateTime: String)","description":"application.presenter.event.model.ProcessEvent.ProcessEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-event/-process-event.html","searchKeys":["ProcessEvent","constructor(key: String, data: E, dateTime: String)","application.presenter.event.model.ProcessEvent.ProcessEvent"]},{"name":"constructor(medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager, medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager)","description":"application.controller.MedicalDeviceController.MedicalDeviceController","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/-medical-device-controller.html","searchKeys":["MedicalDeviceController","constructor(medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager, medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager)","application.controller.MedicalDeviceController.MedicalDeviceController"]},{"name":"constructor(medicalDeviceID: String, processId: String)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.MedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-device-usage/-medical-device-usage.html","searchKeys":["MedicalDeviceUsage","constructor(medicalDeviceID: String, processId: String)","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.MedicalDeviceUsage"]},{"name":"constructor(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.AddMedicalDeviceUsage.AddMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-device-usage/-add-medical-device-usage.html","searchKeys":["AddMedicalDeviceUsage","constructor(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.AddMedicalDeviceUsage.AddMedicalDeviceUsage"]},{"name":"constructor(medicalDeviceRepository: MedicalDeviceRepository)","description":"application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.MedicalDeviceUsageEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-device-usage-event-handler/-medical-device-usage-event-handler.html","searchKeys":["MedicalDeviceUsageEventHandler","constructor(medicalDeviceRepository: MedicalDeviceRepository)","application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.MedicalDeviceUsageEventHandler"]},{"name":"constructor(medicalDeviceRepository: MedicalDeviceRepository)","description":"application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.MedicalTechnologyUsageEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-technology-usage-event-handler/-medical-technology-usage-event-handler.html","searchKeys":["MedicalTechnologyUsageEventHandler","constructor(medicalDeviceRepository: MedicalDeviceRepository)","application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.MedicalTechnologyUsageEventHandler"]},{"name":"constructor(medicalTechnologyID: String, inUse: Boolean)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.MedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-technology-usage/-medical-technology-usage.html","searchKeys":["MedicalTechnologyUsage","constructor(medicalTechnologyID: String, inUse: Boolean)","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.MedicalTechnologyUsage"]},{"name":"constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.FindProcessByMedicalTechnology.FindProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-find-process-by-medical-technology/-find-process-by-medical-technology.html","searchKeys":["FindProcessByMedicalTechnology","constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.FindProcessByMedicalTechnology.FindProcessByMedicalTechnology"]},{"name":"constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository, inUse: Boolean)","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyById.GetMedicalTechnologyById","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-by-id/-get-medical-technology-by-id.html","searchKeys":["GetMedicalTechnologyById","constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, medicalDeviceRepository: MedicalDeviceRepository, inUse: Boolean)","application.service.MedicalDeviceServices.GetMedicalTechnologyById.GetMedicalTechnologyById"]},{"name":"constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.TimeSeriesMedicalTechnologyUsageMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage-metadata/-time-series-medical-technology-usage-metadata.html","searchKeys":["TimeSeriesMedicalTechnologyUsageMetadata","constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.TimeSeriesMedicalTechnologyUsageMetadata"]},{"name":"constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.AddMedicalTechnologyUsage.AddMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-technology-usage/-add-medical-technology-usage.html","searchKeys":["AddMedicalTechnologyUsage","constructor(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.AddMedicalTechnologyUsage.AddMedicalTechnologyUsage"]},{"name":"constructor(patientId: PatientData.PatientId, from: Instant, to: Instant, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.GetPatientMedicalData.GetPatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-medical-data/-get-patient-medical-data.html","searchKeys":["GetPatientMedicalData","constructor(patientId: PatientData.PatientId, from: Instant, to: Instant, patientRepository: PatientRepository)","application.service.PatientDataServices.GetPatientMedicalData.GetPatientMedicalData"]},{"name":"constructor(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.UpdatePatientMedicalData.UpdatePatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-update-patient-medical-data/-update-patient-medical-data.html","searchKeys":["UpdatePatientMedicalData","constructor(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant, patientRepository: PatientRepository)","application.service.PatientDataServices.UpdatePatientMedicalData.UpdatePatientMedicalData"]},{"name":"constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.CreatePatient.CreatePatient","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-create-patient/-create-patient.html","searchKeys":["CreatePatient","constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","application.service.PatientDataServices.CreatePatient.CreatePatient"]},{"name":"constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.DeletePatient.DeletePatient","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-delete-patient/-delete-patient.html","searchKeys":["DeletePatient","constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","application.service.PatientDataServices.DeletePatient.DeletePatient"]},{"name":"constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.GetCurrentPatientMedicalData.GetCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-current-patient-medical-data/-get-current-patient-medical-data.html","searchKeys":["GetCurrentPatientMedicalData","constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","application.service.PatientDataServices.GetCurrentPatientMedicalData.GetCurrentPatientMedicalData"]},{"name":"constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","description":"application.service.PatientDataServices.GetPatientTaxCode.GetPatientTaxCode","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-tax-code/-get-patient-tax-code.html","searchKeys":["GetPatientTaxCode","constructor(patientId: PatientData.PatientId, patientRepository: PatientRepository)","application.service.PatientDataServices.GetPatientTaxCode.GetPatientTaxCode"]},{"name":"constructor(patientId: PatientData.PatientId, surgeryBookingRepository: BookingRepository)","description":"application.service.SurgeryBookingServices.GetSurgeryBookingByPatient.GetSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-get-surgery-booking-by-patient/-get-surgery-booking-by-patient.html","searchKeys":["GetSurgeryBookingByPatient","constructor(patientId: PatientData.PatientId, surgeryBookingRepository: BookingRepository)","application.service.SurgeryBookingServices.GetSurgeryBookingByPatient.GetSurgeryBookingByPatient"]},{"name":"constructor(patientId: PatientData.PatientId, type: MedicalDataType)","description":"application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.TimeSeriesPatientMedicalDataMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data-metadata/-time-series-patient-medical-data-metadata.html","searchKeys":["TimeSeriesPatientMedicalDataMetadata","constructor(patientId: PatientData.PatientId, type: MedicalDataType)","application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.TimeSeriesPatientMedicalDataMetadata"]},{"name":"constructor(patientId: String)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable.PatientOnOperatingTable","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-on-operating-table/-patient-on-operating-table.html","searchKeys":["PatientOnOperatingTable","constructor(patientId: String)","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable.PatientOnOperatingTable"]},{"name":"constructor(patientId: String, data: E)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.PatientData","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-data/-patient-data.html","searchKeys":["PatientData","constructor(patientId: String, data: E)","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.PatientData"]},{"name":"constructor(patientId: String, roomId: String, entered: Boolean, roomType: ProcessEventsPayloads.RoomType)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.PatientTracked","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/-patient-tracked.html","searchKeys":["PatientTracked","constructor(patientId: String, roomId: String, entered: Boolean, roomType: ProcessEventsPayloads.RoomType)","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.PatientTracked"]},{"name":"constructor(patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager, patientDigitalTwinManager: PatientDigitalTwinManager)","description":"application.controller.PatientDataController.PatientDataController","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/-patient-data-controller.html","searchKeys":["PatientDataController","constructor(patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager, patientDigitalTwinManager: PatientDigitalTwinManager)","application.controller.PatientDataController.PatientDataController"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.BodyTemperatureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-body-temperature-update-event-handler/-body-temperature-update-event-handler.html","searchKeys":["BodyTemperatureUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.BodyTemperatureUpdateEventHandler"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.DiastolicPressureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-diastolic-pressure-update-event-handler/-diastolic-pressure-update-event-handler.html","searchKeys":["DiastolicPressureUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.DiastolicPressureUpdateEventHandler"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.HeartbeatUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-heartbeat-update-event-handler/-heartbeat-update-event-handler.html","searchKeys":["HeartbeatUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.HeartbeatUpdateEventHandler"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.RespiratoryRateUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-respiratory-rate-update-event-handler/-respiratory-rate-update-event-handler.html","searchKeys":["RespiratoryRateUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.RespiratoryRateUpdateEventHandler"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.SaturationUpdateEventHandler.SaturationUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-saturation-update-event-handler/-saturation-update-event-handler.html","searchKeys":["SaturationUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.SaturationUpdateEventHandler.SaturationUpdateEventHandler"]},{"name":"constructor(patientRepository: PatientRepository)","description":"application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.SystolicPressureUpdateEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-systolic-pressure-update-event-handler/-systolic-pressure-update-event-handler.html","searchKeys":["SystolicPressureUpdateEventHandler","constructor(patientRepository: PatientRepository)","application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.SystolicPressureUpdateEventHandler"]},{"name":"constructor(percentage: Int)","description":"entity.patient.PatientData.SaturationPercentage.SaturationPercentage","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-saturation-percentage/-saturation-percentage.html","searchKeys":["SaturationPercentage","constructor(percentage: Int)","entity.patient.PatientData.SaturationPercentage.SaturationPercentage"]},{"name":"constructor(pressure: Int)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure.DiastolicPressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-diastolic-pressure/-diastolic-pressure.html","searchKeys":["DiastolicPressure","constructor(pressure: Int)","application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure.DiastolicPressure"]},{"name":"constructor(pressure: Int)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure.SystolicPressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-systolic-pressure/-systolic-pressure.html","searchKeys":["SystolicPressure","constructor(pressure: Int)","application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure.SystolicPressure"]},{"name":"constructor(pressure: Int)","description":"entity.patient.PatientData.DiastolicBloodPressure.DiastolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-diastolic-blood-pressure/-diastolic-blood-pressure.html","searchKeys":["DiastolicBloodPressure","constructor(pressure: Int)","entity.patient.PatientData.DiastolicBloodPressure.DiastolicBloodPressure"]},{"name":"constructor(pressure: Int)","description":"entity.patient.PatientData.SystolicBloodPressure.SystolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-systolic-blood-pressure/-systolic-blood-pressure.html","searchKeys":["SystolicBloodPressure","constructor(pressure: Int)","entity.patient.PatientData.SystolicBloodPressure.SystolicBloodPressure"]},{"name":"constructor(processDatabaseManager: ProcessDatabaseManager, processDigitalTwinManager: ProcessDigitalTwinManager)","description":"application.controller.SurgicalProcessController.SurgicalProcessController","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/-surgical-process-controller.html","searchKeys":["SurgicalProcessController","constructor(processDatabaseManager: ProcessDatabaseManager, processDigitalTwinManager: ProcessDigitalTwinManager)","application.controller.SurgicalProcessController.SurgicalProcessController"]},{"name":"constructor(processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesProcessStateEventMetadata.TimeSeriesProcessStateEventMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event-metadata/-time-series-process-state-event-metadata.html","searchKeys":["TimeSeriesProcessStateEventMetadata","constructor(processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesProcessStateEventMetadata.TimeSeriesProcessStateEventMetadata"]},{"name":"constructor(processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesProcessStepEventMetadata.TimeSeriesProcessStepEventMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event-metadata/-time-series-process-step-event-metadata.html","searchKeys":["TimeSeriesProcessStepEventMetadata","constructor(processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesProcessStepEventMetadata.TimeSeriesProcessStepEventMetadata"]},{"name":"constructor(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId.GetMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-usage-by-process-id/-get-medical-device-usage-by-process-id.html","searchKeys":["GetMedicalDeviceUsageByProcessId","constructor(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId.GetMedicalDeviceUsageByProcessId"]},{"name":"constructor(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId.GetMedicalTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-usage-by-process-id/-get-medical-technology-usage-by-process-id.html","searchKeys":["GetMedicalTechnologyUsageByProcessId","constructor(processId: ProcessData.ProcessId, medicalDeviceRepository: MedicalDeviceRepository)","application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId.GetMedicalTechnologyUsageByProcessId"]},{"name":"constructor(processId: ProcessData.ProcessId, processType: String, patientId: PatientData.PatientId, patientTaxCode: PatientData.TaxCode?, healthProfessionalId: HealthProfessionalData.HealthProfessionalId?, preOperatingRoom: Room?, operatingRoom: Room?, processStates: List<Pair<Instant, ProcessData.ProcessState>>, processSteps: List<Pair<Instant, ProcessData.ProcessStep>>, patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>, medicalDeviceUsage: List<ImplantableMedicalDevice>, medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>)","description":"entity.report.SurgeryReport.SurgeryReport","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/-surgery-report.html","searchKeys":["SurgeryReport","constructor(processId: ProcessData.ProcessId, processType: String, patientId: PatientData.PatientId, patientTaxCode: PatientData.TaxCode?, healthProfessionalId: HealthProfessionalData.HealthProfessionalId?, preOperatingRoom: Room?, operatingRoom: Room?, processStates: List<Pair<Instant, ProcessData.ProcessState>>, processSteps: List<Pair<Instant, ProcessData.ProcessStep>>, patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>, medicalDeviceUsage: List<ImplantableMedicalDevice>, medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>)","entity.report.SurgeryReport.SurgeryReport"]},{"name":"constructor(processId: String, dateTime: String, type: String, patientId: String, healthProfessionalId: String?, preOperatingRoom: Room?, operatingRoom: Room?, state: String, step: String)","description":"application.presenter.api.SurgicalProcessApiDto.SurgicalProcessApiDto","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/-surgical-process-api-dto.html","searchKeys":["SurgicalProcessApiDto","constructor(processId: String, dateTime: String, type: String, patientId: String, healthProfessionalId: String?, preOperatingRoom: Room?, operatingRoom: Room?, state: String, step: String)","application.presenter.api.SurgicalProcessApiDto.SurgicalProcessApiDto"]},{"name":"constructor(processId: String, processType: String, patientId: String, patientTaxCode: String, healthProfessionalId: String, preOperatingRoomId: String, operatingRoomId: String, processStates: List<Pair<String, ProcessData.ProcessState>>, processSteps: List<Pair<String, ProcessData.ProcessStep>>, patientMedicalData: List<Pair<String, PatientData.MedicalData>>, medicalDeviceUsage: List<ImplantableMedicalDevice>, medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>)","description":"application.presenter.event.serialization.SurgeryReportDto.SurgeryReportDto","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/-surgery-report-dto.html","searchKeys":["SurgeryReportDto","constructor(processId: String, processType: String, patientId: String, patientTaxCode: String, healthProfessionalId: String, preOperatingRoomId: String, operatingRoomId: String, processStates: List<Pair<String, ProcessData.ProcessState>>, processSteps: List<Pair<String, ProcessData.ProcessStep>>, patientMedicalData: List<Pair<String, PatientData.MedicalData>>, medicalDeviceUsage: List<ImplantableMedicalDevice>, medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>)","application.presenter.event.serialization.SurgeryReportDto.SurgeryReportDto"]},{"name":"constructor(provider: ManagerProvider)","description":"infrastructure.api.ApiRouter.ApiRouter","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/-api-router.html","searchKeys":["ApiRouter","constructor(provider: ManagerProvider)","infrastructure.api.ApiRouter.ApiRouter"]},{"name":"constructor(provider: ManagerProvider)","description":"infrastructure.event.KafkaClient.KafkaClient","location":"surgical-process-monitoring-microservice/infrastructure.event/-kafka-client/-kafka-client.html","searchKeys":["KafkaClient","constructor(provider: ManagerProvider)","infrastructure.event.KafkaClient.KafkaClient"]},{"name":"constructor(rate: Int)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate.RespiratoryRate","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-respiratory-rate/-respiratory-rate.html","searchKeys":["RespiratoryRate","constructor(rate: Int)","application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate.RespiratoryRate"]},{"name":"constructor(rate: Int)","description":"entity.patient.PatientData.RespiratoryRate.RespiratoryRate","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-respiratory-rate/-respiratory-rate.html","searchKeys":["RespiratoryRate","constructor(rate: Int)","entity.patient.PatientData.RespiratoryRate.RespiratoryRate"]},{"name":"constructor(roomId: String, manualEvent: String)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.ProcessManualEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-process-manual-event/-process-manual-event.html","searchKeys":["ProcessManualEvent","constructor(roomId: String, manualEvent: String)","application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.ProcessManualEvent"]},{"name":"constructor(roomId: String, patientTaxCode: String?)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.EmergencySurgery","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-emergency-surgery/-emergency-surgery.html","searchKeys":["EmergencySurgery","constructor(roomId: String, patientTaxCode: String?)","application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.EmergencySurgery"]},{"name":"constructor(saturation: Int)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation.Saturation","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-saturation/-saturation.html","searchKeys":["Saturation","constructor(saturation: Int)","application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation.Saturation"]},{"name":"constructor(surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager)","description":"application.controller.SurgeryBookingController.SurgeryBookingController","location":"surgical-process-monitoring-microservice/application.controller/-surgery-booking-controller/-surgery-booking-controller.html","searchKeys":["SurgeryBookingController","constructor(surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager)","application.controller.SurgeryBookingController.SurgeryBookingController"]},{"name":"constructor(surgicalProcess: SurgicalProcess, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.CreateSurgicalProcess.CreateSurgicalProcess","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-create-surgical-process/-create-surgical-process.html","searchKeys":["CreateSurgicalProcess","constructor(surgicalProcess: SurgicalProcess, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.CreateSurgicalProcess.CreateSurgicalProcess"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessState.UpdateSurgicalProcessState","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-state/-update-surgical-process-state.html","searchKeys":["UpdateSurgicalProcessState","constructor(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.UpdateSurgicalProcessState.UpdateSurgicalProcessState"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessStep.UpdateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-step/-update-surgical-process-step.html","searchKeys":["UpdateSurgicalProcessStep","constructor(surgicalProcessId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.UpdateSurgicalProcessStep.UpdateSurgicalProcessStep"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, latestRoomId: String?, room: Room, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom.UpdateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-room/-update-surgical-process-room.html","searchKeys":["UpdateSurgicalProcessRoom","constructor(surgicalProcessId: ProcessData.ProcessId, latestRoomId: String?, room: Room, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom.UpdateSurgicalProcessRoom"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.DeleteSurgicalProcess.DeleteSurgicalProcess","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-delete-surgical-process/-delete-surgical-process.html","searchKeys":["DeleteSurgicalProcess","constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.DeleteSurgicalProcess.DeleteSurgicalProcess"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.GetSurgicalProcessById.GetSurgicalProcessById","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-by-id/-get-surgical-process-by-id.html","searchKeys":["GetSurgicalProcessById","constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.GetSurgicalProcessById.GetSurgicalProcessById"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.GetSurgicalProcessStates.GetSurgicalProcessStates","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-states/-get-surgical-process-states.html","searchKeys":["GetSurgicalProcessStates","constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.GetSurgicalProcessStates.GetSurgicalProcessStates"]},{"name":"constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.GetSurgicalProcessSteps.GetSurgicalProcessSteps","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-steps/-get-surgical-process-steps.html","searchKeys":["GetSurgicalProcessSteps","constructor(surgicalProcessId: ProcessData.ProcessId, surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.GetSurgicalProcessSteps.GetSurgicalProcessSteps"]},{"name":"constructor(surgicalProcessRepository: SurgicalProcessRepository)","description":"application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.PatientOnOperatingTableEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-patient-on-operating-table-event-handler/-patient-on-operating-table-event-handler.html","searchKeys":["PatientOnOperatingTableEventHandler","constructor(surgicalProcessRepository: SurgicalProcessRepository)","application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.PatientOnOperatingTableEventHandler"]},{"name":"constructor(surgicalProcessRepository: SurgicalProcessRepository)","description":"application.handler.ProcessEventHandlers.ProcessManualEventHandler.ProcessManualEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-process-manual-event-handler/-process-manual-event-handler.html","searchKeys":["ProcessManualEventHandler","constructor(surgicalProcessRepository: SurgicalProcessRepository)","application.handler.ProcessEventHandlers.ProcessManualEventHandler.ProcessManualEventHandler"]},{"name":"constructor(surgicalProcessRepository: SurgicalProcessRepository)","description":"application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses.GetCurrentSurgicalProcesses","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-current-surgical-processes/-get-current-surgical-processes.html","searchKeys":["GetCurrentSurgicalProcesses","constructor(surgicalProcessRepository: SurgicalProcessRepository)","application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses.GetCurrentSurgicalProcesses"]},{"name":"constructor(surgicalProcessRepository: SurgicalProcessRepository, patientRepository: PatientRepository)","description":"application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.EmergencySurgeryEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-emergency-surgery-event-handler/-emergency-surgery-event-handler.html","searchKeys":["EmergencySurgeryEventHandler","constructor(surgicalProcessRepository: SurgicalProcessRepository, patientRepository: PatientRepository)","application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.EmergencySurgeryEventHandler"]},{"name":"constructor(surgicalProcessRepository: SurgicalProcessRepository, surgeryBookingRepository: BookingRepository, patientRepository: PatientRepository, medicalDeviceRepository: MedicalDeviceRepository, eventProducer: EventProducer)","description":"application.handler.ProcessEventHandlers.PatientTrackedEventHandler.PatientTrackedEventHandler","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-patient-tracked-event-handler/-patient-tracked-event-handler.html","searchKeys":["PatientTrackedEventHandler","constructor(surgicalProcessRepository: SurgicalProcessRepository, surgeryBookingRepository: BookingRepository, patientRepository: PatientRepository, medicalDeviceRepository: MedicalDeviceRepository, eventProducer: EventProducer)","application.handler.ProcessEventHandlers.PatientTrackedEventHandler.PatientTrackedEventHandler"]},{"name":"constructor(temperature: Double)","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature.BodyTemperature","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-body-temperature/-body-temperature.html","searchKeys":["BodyTemperature","constructor(temperature: Double)","application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature.BodyTemperature"]},{"name":"data class BodyTemperature(val degree: Double, val unit: PatientData.TemperatureUnit = TemperatureUnit.CELSIUS)","description":"entity.patient.PatientData.BodyTemperature","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-body-temperature/index.html","searchKeys":["BodyTemperature","data class BodyTemperature(val degree: Double, val unit: PatientData.TemperatureUnit = TemperatureUnit.CELSIUS)","entity.patient.PatientData.BodyTemperature"]},{"name":"data class BodyTemperature(val temperature: Double) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-body-temperature/index.html","searchKeys":["BodyTemperature","data class BodyTemperature(val temperature: Double) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature"]},{"name":"data class DiastolicBloodPressure(val pressure: Int)","description":"entity.patient.PatientData.DiastolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-diastolic-blood-pressure/index.html","searchKeys":["DiastolicBloodPressure","data class DiastolicBloodPressure(val pressure: Int)","entity.patient.PatientData.DiastolicBloodPressure"]},{"name":"data class DiastolicPressure(val pressure: Int) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-diastolic-pressure/index.html","searchKeys":["DiastolicPressure","data class DiastolicPressure(val pressure: Int) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure"]},{"name":"data class EmergencySurgery(val roomId: String, val patientTaxCode: String?) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-emergency-surgery/index.html","searchKeys":["EmergencySurgery","data class EmergencySurgery(val roomId: String, val patientTaxCode: String?) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery"]},{"name":"data class HealthProfessional(val id: HealthProfessionalData.HealthProfessionalId, val name: String? = null, val surname: String? = null, val role: HealthProfessionalData.HealthProfessionalRole = HealthProfessionalData.HealthProfessionalRole.SURGEON)","description":"entity.healthprofessional.HealthProfessional","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/index.html","searchKeys":["HealthProfessional","data class HealthProfessional(val id: HealthProfessionalData.HealthProfessionalId, val name: String? = null, val surname: String? = null, val role: HealthProfessionalData.HealthProfessionalRole = HealthProfessionalData.HealthProfessionalRole.SURGEON)","entity.healthprofessional.HealthProfessional"]},{"name":"data class HealthProfessionalId(val id: String)","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalId","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-id/index.html","searchKeys":["HealthProfessionalId","data class HealthProfessionalId(val id: String)","entity.healthprofessional.HealthProfessionalData.HealthProfessionalId"]},{"name":"data class HeartBeat(val bpm: Int)","description":"entity.patient.PatientData.HeartBeat","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-heart-beat/index.html","searchKeys":["HeartBeat","data class HeartBeat(val bpm: Int)","entity.patient.PatientData.HeartBeat"]},{"name":"data class Heartbeat(val heartbeat: Int) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-heartbeat/index.html","searchKeys":["Heartbeat","data class Heartbeat(val heartbeat: Int) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat"]},{"name":"data class ImplantableMedicalDevice(val id: MedicalDeviceData.ImplantableMedicalDeviceId, val type: MedicalDeviceData.DeviceType)","description":"entity.medicaldevice.ImplantableMedicalDevice","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/index.html","searchKeys":["ImplantableMedicalDevice","data class ImplantableMedicalDevice(val id: MedicalDeviceData.ImplantableMedicalDeviceId, val type: MedicalDeviceData.DeviceType)","entity.medicaldevice.ImplantableMedicalDevice"]},{"name":"data class ImplantableMedicalDeviceId(val id: String)","description":"entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-implantable-medical-device-id/index.html","searchKeys":["ImplantableMedicalDeviceId","data class ImplantableMedicalDeviceId(val id: String)","entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId"]},{"name":"data class MedicalData(val heartBeat: PatientData.HeartBeat? = null, val diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null, val systolicBloodPressure: PatientData.SystolicBloodPressure? = null, val respiratoryRate: PatientData.RespiratoryRate? = null, val saturationPercentage: PatientData.SaturationPercentage? = null, val bodyTemperature: PatientData.BodyTemperature? = null)","description":"entity.patient.PatientData.MedicalData","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/index.html","searchKeys":["MedicalData","data class MedicalData(val heartBeat: PatientData.HeartBeat? = null, val diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null, val systolicBloodPressure: PatientData.SystolicBloodPressure? = null, val respiratoryRate: PatientData.RespiratoryRate? = null, val saturationPercentage: PatientData.SaturationPercentage? = null, val bodyTemperature: PatientData.BodyTemperature? = null)","entity.patient.PatientData.MedicalData"]},{"name":"data class MedicalDeviceUsage(val implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, val processId: ProcessData.ProcessId)","description":"application.presenter.database.model.MedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-device-usage/index.html","searchKeys":["MedicalDeviceUsage","data class MedicalDeviceUsage(val implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, val processId: ProcessData.ProcessId)","application.presenter.database.model.MedicalDeviceUsage"]},{"name":"data class MedicalDeviceUsage(val medicalDeviceID: String, val processId: String) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-device-usage/index.html","searchKeys":["MedicalDeviceUsage","data class MedicalDeviceUsage(val medicalDeviceID: String, val processId: String) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage"]},{"name":"data class MedicalTechnology(val id: MedicalDeviceData.MedicalTechnologyId, val name: String, val description: String? = null, val type: MedicalDeviceData.MedicalTechnologyType, val inUse: Boolean)","description":"entity.medicaldevice.MedicalTechnology","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/index.html","searchKeys":["MedicalTechnology","data class MedicalTechnology(val id: MedicalDeviceData.MedicalTechnologyId, val name: String, val description: String? = null, val type: MedicalDeviceData.MedicalTechnologyType, val inUse: Boolean)","entity.medicaldevice.MedicalTechnology"]},{"name":"data class MedicalTechnologyId(val id: String)","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-id/index.html","searchKeys":["MedicalTechnologyId","data class MedicalTechnologyId(val id: String)","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId"]},{"name":"data class MedicalTechnologyUsage(val medicalTechnologyID: String, val inUse: Boolean) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-technology-usage/index.html","searchKeys":["MedicalTechnologyUsage","data class MedicalTechnologyUsage(val medicalTechnologyID: String, val inUse: Boolean) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage"]},{"name":"data class Patient(val id: PatientData.PatientId, val name: String? = null, val surname: String? = null, val medicalData: PatientData.MedicalData)","description":"entity.patient.Patient","location":"surgical-process-monitoring-microservice/entity.patient/-patient/index.html","searchKeys":["Patient","data class Patient(val id: PatientData.PatientId, val name: String? = null, val surname: String? = null, val medicalData: PatientData.MedicalData)","entity.patient.Patient"]},{"name":"data class PatientData<E : ProcessEventsPayloads.PatientDataPayload>(val patientId: String, val data: E) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-data/index.html","searchKeys":["PatientData","data class PatientData<E : ProcessEventsPayloads.PatientDataPayload>(val patientId: String, val data: E) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData"]},{"name":"data class PatientId(val id: String)","description":"entity.patient.PatientData.PatientId","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-patient-id/index.html","searchKeys":["PatientId","data class PatientId(val id: String)","entity.patient.PatientData.PatientId"]},{"name":"data class PatientOnOperatingTable(val patientId: String) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-on-operating-table/index.html","searchKeys":["PatientOnOperatingTable","data class PatientOnOperatingTable(val patientId: String) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable"]},{"name":"data class PatientTracked(val patientId: String, val roomId: String, val entered: Boolean, val roomType: ProcessEventsPayloads.RoomType) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/index.html","searchKeys":["PatientTracked","data class PatientTracked(val patientId: String, val roomId: String, val entered: Boolean, val roomType: ProcessEventsPayloads.RoomType) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked"]},{"name":"data class ProcessEvent<E : ProcessEventsPayloads.ProcessEventPayload>(val key: String, val data: E, val dateTime: String) : Event<E> ","description":"application.presenter.event.model.ProcessEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-event/index.html","searchKeys":["ProcessEvent","data class ProcessEvent<E : ProcessEventsPayloads.ProcessEventPayload>(val key: String, val data: E, val dateTime: String) : Event<E> ","application.presenter.event.model.ProcessEvent"]},{"name":"data class ProcessId(val id: String)","description":"entity.process.ProcessData.ProcessId","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-id/index.html","searchKeys":["ProcessId","data class ProcessId(val id: String)","entity.process.ProcessData.ProcessId"]},{"name":"data class ProcessManualEvent(val roomId: String, val manualEvent: String) : ProcessEventsPayloads.ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-process-manual-event/index.html","searchKeys":["ProcessManualEvent","data class ProcessManualEvent(val roomId: String, val manualEvent: String) : ProcessEventsPayloads.ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent"]},{"name":"data class RespiratoryRate(val rate: Int)","description":"entity.patient.PatientData.RespiratoryRate","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-respiratory-rate/index.html","searchKeys":["RespiratoryRate","data class RespiratoryRate(val rate: Int)","entity.patient.PatientData.RespiratoryRate"]},{"name":"data class RespiratoryRate(val rate: Int) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-respiratory-rate/index.html","searchKeys":["RespiratoryRate","data class RespiratoryRate(val rate: Int) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate"]},{"name":"data class ResponseEntryList<out T>(val entries: List<T>, val total: Int = entries.count())","description":"infrastructure.api.util.ResponseEntryList","location":"surgical-process-monitoring-microservice/infrastructure.api.util/-response-entry-list/index.html","searchKeys":["ResponseEntryList","data class ResponseEntryList<out T>(val entries: List<T>, val total: Int = entries.count())","infrastructure.api.util.ResponseEntryList"]},{"name":"data class Room(val id: RoomData.RoomId, val type: RoomData.RoomType)","description":"entity.room.Room","location":"surgical-process-monitoring-microservice/entity.room/-room/index.html","searchKeys":["Room","data class Room(val id: RoomData.RoomId, val type: RoomData.RoomType)","entity.room.Room"]},{"name":"data class RoomId(val id: String)","description":"entity.room.RoomData.RoomId","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-id/index.html","searchKeys":["RoomId","data class RoomId(val id: String)","entity.room.RoomData.RoomId"]},{"name":"data class Saturation(val saturation: Int) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-saturation/index.html","searchKeys":["Saturation","data class Saturation(val saturation: Int) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation"]},{"name":"data class SaturationPercentage(val percentage: Int)","description":"entity.patient.PatientData.SaturationPercentage","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-saturation-percentage/index.html","searchKeys":["SaturationPercentage","data class SaturationPercentage(val percentage: Int)","entity.patient.PatientData.SaturationPercentage"]},{"name":"data class SurgeryBooking(val id: SurgeryBookingData.SurgeryBookingId, val dateTime: Instant, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId, val patientId: PatientData.PatientId, val surgeryType: String)","description":"entity.booking.SurgeryBooking","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/index.html","searchKeys":["SurgeryBooking","data class SurgeryBooking(val id: SurgeryBookingData.SurgeryBookingId, val dateTime: Instant, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId, val patientId: PatientData.PatientId, val surgeryType: String)","entity.booking.SurgeryBooking"]},{"name":"data class SurgeryBookingId(val id: String)","description":"entity.booking.SurgeryBookingData.SurgeryBookingId","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking-data/-surgery-booking-id/index.html","searchKeys":["SurgeryBookingId","data class SurgeryBookingId(val id: String)","entity.booking.SurgeryBookingData.SurgeryBookingId"]},{"name":"data class SurgeryReport(val processId: ProcessData.ProcessId, val processType: String, val patientId: PatientData.PatientId, val patientTaxCode: PatientData.TaxCode?, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId?, val preOperatingRoom: Room?, val operatingRoom: Room?, val processStates: List<Pair<Instant, ProcessData.ProcessState>>, val processSteps: List<Pair<Instant, ProcessData.ProcessStep>>, val patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>, val medicalDeviceUsage: List<ImplantableMedicalDevice>, val medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>)","description":"entity.report.SurgeryReport","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/index.html","searchKeys":["SurgeryReport","data class SurgeryReport(val processId: ProcessData.ProcessId, val processType: String, val patientId: PatientData.PatientId, val patientTaxCode: PatientData.TaxCode?, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId?, val preOperatingRoom: Room?, val operatingRoom: Room?, val processStates: List<Pair<Instant, ProcessData.ProcessState>>, val processSteps: List<Pair<Instant, ProcessData.ProcessStep>>, val patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>, val medicalDeviceUsage: List<ImplantableMedicalDevice>, val medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>)","entity.report.SurgeryReport"]},{"name":"data class SurgeryReportDto(val processId: String, val processType: String, val patientId: String, val patientTaxCode: String, val healthProfessionalId: String, val preOperatingRoomId: String, val operatingRoomId: String, val processStates: List<Pair<String, ProcessData.ProcessState>>, val processSteps: List<Pair<String, ProcessData.ProcessStep>>, val patientMedicalData: List<Pair<String, PatientData.MedicalData>>, val medicalDeviceUsage: List<ImplantableMedicalDevice>, val medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>)","description":"application.presenter.event.serialization.SurgeryReportDto","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/index.html","searchKeys":["SurgeryReportDto","data class SurgeryReportDto(val processId: String, val processType: String, val patientId: String, val patientTaxCode: String, val healthProfessionalId: String, val preOperatingRoomId: String, val operatingRoomId: String, val processStates: List<Pair<String, ProcessData.ProcessState>>, val processSteps: List<Pair<String, ProcessData.ProcessStep>>, val patientMedicalData: List<Pair<String, PatientData.MedicalData>>, val medicalDeviceUsage: List<ImplantableMedicalDevice>, val medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>)","application.presenter.event.serialization.SurgeryReportDto"]},{"name":"data class SurgeryReportEvent<E>(val key: String = ProcessEventsKeys.SURGERY_REPORT_EVENT, val dateTime: String, val data: E) : Event<E> ","description":"application.presenter.event.model.SurgeryReportEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-surgery-report-event/index.html","searchKeys":["SurgeryReportEvent","data class SurgeryReportEvent<E>(val key: String = ProcessEventsKeys.SURGERY_REPORT_EVENT, val dateTime: String, val data: E) : Event<E> ","application.presenter.event.model.SurgeryReportEvent"]},{"name":"data class SurgicalProcess(val id: ProcessData.ProcessId, val dateTime: Instant, val type: String, val patientId: PatientData.PatientId, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null, val preOperatingRoom: Room? = null, val operatingRoom: Room? = null, val state: ProcessData.ProcessState, val step: ProcessData.ProcessStep? = null)","description":"entity.process.SurgicalProcess","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/index.html","searchKeys":["SurgicalProcess","data class SurgicalProcess(val id: ProcessData.ProcessId, val dateTime: Instant, val type: String, val patientId: PatientData.PatientId, val healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null, val preOperatingRoom: Room? = null, val operatingRoom: Room? = null, val state: ProcessData.ProcessState, val step: ProcessData.ProcessStep? = null)","entity.process.SurgicalProcess"]},{"name":"data class SurgicalProcessApiDto(val processId: String, val dateTime: String, val type: String, val patientId: String, val healthProfessionalId: String?, val preOperatingRoom: Room?, val operatingRoom: Room?, val state: String, val step: String)","description":"application.presenter.api.SurgicalProcessApiDto","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/index.html","searchKeys":["SurgicalProcessApiDto","data class SurgicalProcessApiDto(val processId: String, val dateTime: String, val type: String, val patientId: String, val healthProfessionalId: String?, val preOperatingRoom: Room?, val operatingRoom: Room?, val state: String, val step: String)","application.presenter.api.SurgicalProcessApiDto"]},{"name":"data class SystolicBloodPressure(val pressure: Int)","description":"entity.patient.PatientData.SystolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-systolic-blood-pressure/index.html","searchKeys":["SystolicBloodPressure","data class SystolicBloodPressure(val pressure: Int)","entity.patient.PatientData.SystolicBloodPressure"]},{"name":"data class SystolicPressure(val pressure: Int) : ProcessEventsPayloads.PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-systolic-pressure/index.html","searchKeys":["SystolicPressure","data class SystolicPressure(val pressure: Int) : ProcessEventsPayloads.PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure"]},{"name":"data class TaxCode(val code: String)","description":"entity.patient.PatientData.TaxCode","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-tax-code/index.html","searchKeys":["TaxCode","data class TaxCode(val code: String)","entity.patient.PatientData.TaxCode"]},{"name":"data class TimeSeriesMedicalTechnologyUsage(val dateTime: Instant, val metadata: TimeSeriesMedicalTechnologyUsageMetadata, val value: Boolean)","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage/index.html","searchKeys":["TimeSeriesMedicalTechnologyUsage","data class TimeSeriesMedicalTechnologyUsage(val dateTime: Instant, val metadata: TimeSeriesMedicalTechnologyUsageMetadata, val value: Boolean)","application.presenter.database.model.TimeSeriesMedicalTechnologyUsage"]},{"name":"data class TimeSeriesMedicalTechnologyUsageMetadata(val medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, val processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage-metadata/index.html","searchKeys":["TimeSeriesMedicalTechnologyUsageMetadata","data class TimeSeriesMedicalTechnologyUsageMetadata(val medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, val processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata"]},{"name":"data class TimeSeriesPatientMedicalData(val dateTime: Instant, val metadata: TimeSeriesPatientMedicalDataMetadata, val value: Double)","description":"application.presenter.database.model.TimeSeriesPatientMedicalData","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data/index.html","searchKeys":["TimeSeriesPatientMedicalData","data class TimeSeriesPatientMedicalData(val dateTime: Instant, val metadata: TimeSeriesPatientMedicalDataMetadata, val value: Double)","application.presenter.database.model.TimeSeriesPatientMedicalData"]},{"name":"data class TimeSeriesPatientMedicalDataMetadata(val patientId: PatientData.PatientId, val type: MedicalDataType)","description":"application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data-metadata/index.html","searchKeys":["TimeSeriesPatientMedicalDataMetadata","data class TimeSeriesPatientMedicalDataMetadata(val patientId: PatientData.PatientId, val type: MedicalDataType)","application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata"]},{"name":"data class TimeSeriesProcessStateEvent(val dateTime: Instant, val metadata: TimeSeriesProcessStateEventMetadata, val value: ProcessData.ProcessState)","description":"application.presenter.database.model.TimeSeriesProcessStateEvent","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event/index.html","searchKeys":["TimeSeriesProcessStateEvent","data class TimeSeriesProcessStateEvent(val dateTime: Instant, val metadata: TimeSeriesProcessStateEventMetadata, val value: ProcessData.ProcessState)","application.presenter.database.model.TimeSeriesProcessStateEvent"]},{"name":"data class TimeSeriesProcessStateEventMetadata(val processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesProcessStateEventMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event-metadata/index.html","searchKeys":["TimeSeriesProcessStateEventMetadata","data class TimeSeriesProcessStateEventMetadata(val processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesProcessStateEventMetadata"]},{"name":"data class TimeSeriesProcessStepEvent(val dateTime: Instant, val metadata: TimeSeriesProcessStepEventMetadata, val value: ProcessData.ProcessStep)","description":"application.presenter.database.model.TimeSeriesProcessStepEvent","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event/index.html","searchKeys":["TimeSeriesProcessStepEvent","data class TimeSeriesProcessStepEvent(val dateTime: Instant, val metadata: TimeSeriesProcessStepEventMetadata, val value: ProcessData.ProcessStep)","application.presenter.database.model.TimeSeriesProcessStepEvent"]},{"name":"data class TimeSeriesProcessStepEventMetadata(val processId: ProcessData.ProcessId)","description":"application.presenter.database.model.TimeSeriesProcessStepEventMetadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event-metadata/index.html","searchKeys":["TimeSeriesProcessStepEventMetadata","data class TimeSeriesProcessStepEventMetadata(val processId: ProcessData.ProcessId)","application.presenter.database.model.TimeSeriesProcessStepEventMetadata"]},{"name":"enum DeviceType : Enum<MedicalDeviceData.DeviceType> ","description":"entity.medicaldevice.MedicalDeviceData.DeviceType","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-device-type/index.html","searchKeys":["DeviceType","enum DeviceType : Enum<MedicalDeviceData.DeviceType> ","entity.medicaldevice.MedicalDeviceData.DeviceType"]},{"name":"enum HealthProfessionalRole : Enum<HealthProfessionalData.HealthProfessionalRole> ","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/index.html","searchKeys":["HealthProfessionalRole","enum HealthProfessionalRole : Enum<HealthProfessionalData.HealthProfessionalRole> ","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole"]},{"name":"enum MedicalDataType : Enum<MedicalDataType> ","description":"application.presenter.database.model.MedicalDataType","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/index.html","searchKeys":["MedicalDataType","enum MedicalDataType : Enum<MedicalDataType> ","application.presenter.database.model.MedicalDataType"]},{"name":"enum MedicalTechnologyType : Enum<MedicalDeviceData.MedicalTechnologyType> ","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-type/index.html","searchKeys":["MedicalTechnologyType","enum MedicalTechnologyType : Enum<MedicalDeviceData.MedicalTechnologyType> ","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType"]},{"name":"enum ProcessState : Enum<ProcessData.ProcessState> ","description":"entity.process.ProcessData.ProcessState","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/index.html","searchKeys":["ProcessState","enum ProcessState : Enum<ProcessData.ProcessState> ","entity.process.ProcessData.ProcessState"]},{"name":"enum ProcessStep : Enum<ProcessData.ProcessStep> ","description":"entity.process.ProcessData.ProcessStep","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/index.html","searchKeys":["ProcessStep","enum ProcessStep : Enum<ProcessData.ProcessStep> ","entity.process.ProcessData.ProcessStep"]},{"name":"enum RoomType : Enum<ProcessEventsPayloads.RoomType> ","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-room-type/index.html","searchKeys":["RoomType","enum RoomType : Enum<ProcessEventsPayloads.RoomType> ","application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType"]},{"name":"enum RoomType : Enum<RoomData.RoomType> ","description":"entity.room.RoomData.RoomType","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-type/index.html","searchKeys":["RoomType","enum RoomType : Enum<RoomData.RoomType> ","entity.room.RoomData.RoomType"]},{"name":"enum TemperatureUnit : Enum<PatientData.TemperatureUnit> ","description":"entity.patient.PatientData.TemperatureUnit","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-temperature-unit/index.html","searchKeys":["TemperatureUnit","enum TemperatureUnit : Enum<PatientData.TemperatureUnit> ","entity.patient.PatientData.TemperatureUnit"]},{"name":"fun <T, U> List<Pair<T?, U?>>.filterPairs(): List<Pair<T, U>>","description":"application.handler.ProcessEventHandlers.filterPairs","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/filter-pairs.html","searchKeys":["filterPairs","fun <T, U> List<Pair<T?, U?>>.filterPairs(): List<Pair<T, U>>","application.handler.ProcessEventHandlers.filterPairs"]},{"name":"fun BasicDigitalTwin.mapRelationships(): BasicDigitalTwin","description":"infrastructure.digitaltwin.DigitalTwinManager.mapRelationships","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/map-relationships.html","searchKeys":["mapRelationships","fun BasicDigitalTwin.mapRelationships(): BasicDigitalTwin","infrastructure.digitaltwin.DigitalTwinManager.mapRelationships"]},{"name":"fun BasicDigitalTwin.toImplantableMedicalDevice(): ImplantableMedicalDevice","description":"infrastructure.digitaltwin.presenter.MedicalDeviceAdt.toImplantableMedicalDevice","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-medical-device-adt/to-implantable-medical-device.html","searchKeys":["toImplantableMedicalDevice","fun BasicDigitalTwin.toImplantableMedicalDevice(): ImplantableMedicalDevice","infrastructure.digitaltwin.presenter.MedicalDeviceAdt.toImplantableMedicalDevice"]},{"name":"fun BasicDigitalTwin.toMedicalTechnology(value: Boolean): MedicalTechnology","description":"infrastructure.digitaltwin.presenter.MedicalTechnologyAdt.toMedicalTechnology","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-medical-technology-adt/to-medical-technology.html","searchKeys":["toMedicalTechnology","fun BasicDigitalTwin.toMedicalTechnology(value: Boolean): MedicalTechnology","infrastructure.digitaltwin.presenter.MedicalTechnologyAdt.toMedicalTechnology"]},{"name":"fun BasicDigitalTwin.toSurgeryBooking(): SurgeryBooking","description":"infrastructure.digitaltwin.presenter.SurgeryBookingAdt.toSurgeryBooking","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgery-booking-adt/to-surgery-booking.html","searchKeys":["toSurgeryBooking","fun BasicDigitalTwin.toSurgeryBooking(): SurgeryBooking","infrastructure.digitaltwin.presenter.SurgeryBookingAdt.toSurgeryBooking"]},{"name":"fun Map<MedicalDataType, TimeSeriesPatientMedicalData?>.toPatientMedicalData(startData: PatientData.MedicalData? = null): PatientData.MedicalData","description":"application.presenter.database.model.toPatientMedicalData","location":"surgical-process-monitoring-microservice/application.presenter.database.model/to-patient-medical-data.html","searchKeys":["toPatientMedicalData","fun Map<MedicalDataType, TimeSeriesPatientMedicalData?>.toPatientMedicalData(startData: PatientData.MedicalData? = null): PatientData.MedicalData","application.presenter.database.model.toPatientMedicalData"]},{"name":"fun Patient.toDigitalTwin(): BasicDigitalTwin","description":"infrastructure.digitaltwin.presenter.PatientAdt.toDigitalTwin","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-patient-adt/to-digital-twin.html","searchKeys":["toDigitalTwin","fun Patient.toDigitalTwin(): BasicDigitalTwin","infrastructure.digitaltwin.presenter.PatientAdt.toDigitalTwin"]},{"name":"fun PatientData.MedicalData.toTimeSeriesMedicalData(dateTime: Instant, patientId: PatientData.PatientId): TimeSeriesPatientMedicalData","description":"application.presenter.database.model.toTimeSeriesMedicalData","location":"surgical-process-monitoring-microservice/application.presenter.database.model/to-time-series-medical-data.html","searchKeys":["toTimeSeriesMedicalData","fun PatientData.MedicalData.toTimeSeriesMedicalData(dateTime: Instant, patientId: PatientData.PatientId): TimeSeriesPatientMedicalData","application.presenter.database.model.toTimeSeriesMedicalData"]},{"name":"fun Route.processAPI(apiPath: String, provider: ManagerProvider)","description":"infrastructure.api.routes.processAPI","location":"surgical-process-monitoring-microservice/infrastructure.api.routes/process-a-p-i.html","searchKeys":["processAPI","fun Route.processAPI(apiPath: String, provider: ManagerProvider)","infrastructure.api.routes.processAPI"]},{"name":"fun String.toEvent(eventKey: String): Event<*>","description":"application.presenter.event.serialization.EventSerialization.toEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-event-serialization/to-event.html","searchKeys":["toEvent","fun String.toEvent(eventKey: String): Event<*>","application.presenter.event.serialization.EventSerialization.toEvent"]},{"name":"fun SurgeryReport.toSurgeryReportDto(): SurgeryReportDto","description":"application.presenter.event.serialization.toSurgeryReportDto","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/to-surgery-report-dto.html","searchKeys":["toSurgeryReportDto","fun SurgeryReport.toSurgeryReportDto(): SurgeryReportDto","application.presenter.event.serialization.toSurgeryReportDto"]},{"name":"fun SurgicalProcess.toDigitalTwin(): BasicDigitalTwin","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt.toDigitalTwin","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/to-digital-twin.html","searchKeys":["toDigitalTwin","fun SurgicalProcess.toDigitalTwin(): BasicDigitalTwin","infrastructure.digitaltwin.presenter.SurgicalProcessAdt.toDigitalTwin"]},{"name":"fun SurgicalProcess.toSurgicalProcessApiDto(): SurgicalProcessApiDto","description":"application.presenter.api.toSurgicalProcessApiDto","location":"surgical-process-monitoring-microservice/application.presenter.api/to-surgical-process-api-dto.html","searchKeys":["toSurgicalProcessApiDto","fun SurgicalProcess.toSurgicalProcessApiDto(): SurgicalProcessApiDto","application.presenter.api.toSurgicalProcessApiDto"]},{"name":"fun and(whereClause: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.and","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/and.html","searchKeys":["and","fun and(whereClause: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.and"]},{"name":"fun createQuery(): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.Companion.createQuery","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/-companion/create-query.html","searchKeys":["createQuery","fun createQuery(): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.Companion.createQuery"]},{"name":"fun fromDigitalTwins(alias: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.fromDigitalTwins","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/from-digital-twins.html","searchKeys":["fromDigitalTwins","fun fromDigitalTwins(alias: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.fromDigitalTwins"]},{"name":"fun interface ApplicationService<out T>","description":"application.service.ApplicationService","location":"surgical-process-monitoring-microservice/application.service/-application-service/index.html","searchKeys":["ApplicationService","fun interface ApplicationService<out T>","application.service.ApplicationService"]},{"name":"fun interface EventProducer","description":"application.controller.manager.EventProducer","location":"surgical-process-monitoring-microservice/application.controller.manager/-event-producer/index.html","searchKeys":["EventProducer","fun interface EventProducer","application.controller.manager.EventProducer"]},{"name":"fun interface UseCase<out X>","description":"usecase.UseCase","location":"surgical-process-monitoring-microservice/usecase/-use-case/index.html","searchKeys":["UseCase","fun interface UseCase<out X>","usecase.UseCase"]},{"name":"fun isSurgicalProcessOver(processId: String, surgicalProcessRepository: SurgicalProcessRepository): Boolean","description":"application.handler.ProcessEventHandlers.isSurgicalProcessOver","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/is-surgical-process-over.html","searchKeys":["isSurgicalProcessOver","fun isSurgicalProcessOver(processId: String, surgicalProcessRepository: SurgicalProcessRepository): Boolean","application.handler.ProcessEventHandlers.isSurgicalProcessOver"]},{"name":"fun joinRelationship(dstAlias: String, srcAlias: String, relationshipName: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.joinRelationship","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/join-relationship.html","searchKeys":["joinRelationship","fun joinRelationship(dstAlias: String, srcAlias: String, relationshipName: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.joinRelationship"]},{"name":"fun loadConsumerProperties(bootstrapServerUrl: String, schemaRegistryUrl: String): Map<String, Any>","description":"infrastructure.event.loadConsumerProperties","location":"surgical-process-monitoring-microservice/infrastructure.event/load-consumer-properties.html","searchKeys":["loadConsumerProperties","fun loadConsumerProperties(bootstrapServerUrl: String, schemaRegistryUrl: String): Map<String, Any>","infrastructure.event.loadConsumerProperties"]},{"name":"fun loadProducerProperties(bootstrapServerUrl: String, schemaRegistryUrl: String): Map<String, Any>","description":"infrastructure.event.loadProducerProperties","location":"surgical-process-monitoring-microservice/infrastructure.event/load-producer-properties.html","searchKeys":["loadProducerProperties","fun loadProducerProperties(bootstrapServerUrl: String, schemaRegistryUrl: String): Map<String, Any>","infrastructure.event.loadProducerProperties"]},{"name":"fun main()","description":".main","location":"surgical-process-monitoring-microservice/[root]/main.html","searchKeys":["main","fun main()",".main"]},{"name":"fun module(app: Application)","description":"infrastructure.api.ApiRouter.module","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/module.html","searchKeys":["module","fun module(app: Application)","infrastructure.api.ApiRouter.module"]},{"name":"fun select(vararg elements: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.select","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/select.html","searchKeys":["select","fun select(vararg elements: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.select"]},{"name":"fun selectTop(numberOfElementsToSelect: Int, vararg elements: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.selectTop","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/select-top.html","searchKeys":["selectTop","fun selectTop(numberOfElementsToSelect: Int, vararg elements: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.selectTop"]},{"name":"fun start()","description":"infrastructure.api.ApiRouter.start","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/start.html","searchKeys":["start","fun start()","infrastructure.api.ApiRouter.start"]},{"name":"fun start()","description":"infrastructure.event.KafkaClient.start","location":"surgical-process-monitoring-microservice/infrastructure.event/-kafka-client/start.html","searchKeys":["start","fun start()","infrastructure.event.KafkaClient.start"]},{"name":"fun valueOf(value: String): HealthProfessionalData.HealthProfessionalRole","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.valueOf","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): HealthProfessionalData.HealthProfessionalRole","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.valueOf"]},{"name":"fun valueOf(value: String): MedicalDataType","description":"application.presenter.database.model.MedicalDataType.valueOf","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): MedicalDataType","application.presenter.database.model.MedicalDataType.valueOf"]},{"name":"fun valueOf(value: String): MedicalDeviceData.DeviceType","description":"entity.medicaldevice.MedicalDeviceData.DeviceType.valueOf","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-device-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): MedicalDeviceData.DeviceType","entity.medicaldevice.MedicalDeviceData.DeviceType.valueOf"]},{"name":"fun valueOf(value: String): MedicalDeviceData.MedicalTechnologyType","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.valueOf","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): MedicalDeviceData.MedicalTechnologyType","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.valueOf"]},{"name":"fun valueOf(value: String): PatientData.TemperatureUnit","description":"entity.patient.PatientData.TemperatureUnit.valueOf","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-temperature-unit/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): PatientData.TemperatureUnit","entity.patient.PatientData.TemperatureUnit.valueOf"]},{"name":"fun valueOf(value: String): ProcessData.ProcessState","description":"entity.process.ProcessData.ProcessState.valueOf","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ProcessData.ProcessState","entity.process.ProcessData.ProcessState.valueOf"]},{"name":"fun valueOf(value: String): ProcessData.ProcessStep","description":"entity.process.ProcessData.ProcessStep.valueOf","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ProcessData.ProcessStep","entity.process.ProcessData.ProcessStep.valueOf"]},{"name":"fun valueOf(value: String): ProcessEventsPayloads.RoomType","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.valueOf","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-room-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ProcessEventsPayloads.RoomType","application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.valueOf"]},{"name":"fun valueOf(value: String): RoomData.RoomType","description":"entity.room.RoomData.RoomType.valueOf","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): RoomData.RoomType","entity.room.RoomData.RoomType.valueOf"]},{"name":"fun values(): Array<HealthProfessionalData.HealthProfessionalRole>","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.values","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-role/values.html","searchKeys":["values","fun values(): Array<HealthProfessionalData.HealthProfessionalRole>","entity.healthprofessional.HealthProfessionalData.HealthProfessionalRole.values"]},{"name":"fun values(): Array<MedicalDataType>","description":"application.presenter.database.model.MedicalDataType.values","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-data-type/values.html","searchKeys":["values","fun values(): Array<MedicalDataType>","application.presenter.database.model.MedicalDataType.values"]},{"name":"fun values(): Array<MedicalDeviceData.DeviceType>","description":"entity.medicaldevice.MedicalDeviceData.DeviceType.values","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-device-type/values.html","searchKeys":["values","fun values(): Array<MedicalDeviceData.DeviceType>","entity.medicaldevice.MedicalDeviceData.DeviceType.values"]},{"name":"fun values(): Array<MedicalDeviceData.MedicalTechnologyType>","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.values","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-type/values.html","searchKeys":["values","fun values(): Array<MedicalDeviceData.MedicalTechnologyType>","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyType.values"]},{"name":"fun values(): Array<PatientData.TemperatureUnit>","description":"entity.patient.PatientData.TemperatureUnit.values","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-temperature-unit/values.html","searchKeys":["values","fun values(): Array<PatientData.TemperatureUnit>","entity.patient.PatientData.TemperatureUnit.values"]},{"name":"fun values(): Array<ProcessData.ProcessState>","description":"entity.process.ProcessData.ProcessState.values","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-state/values.html","searchKeys":["values","fun values(): Array<ProcessData.ProcessState>","entity.process.ProcessData.ProcessState.values"]},{"name":"fun values(): Array<ProcessData.ProcessStep>","description":"entity.process.ProcessData.ProcessStep.values","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-step/values.html","searchKeys":["values","fun values(): Array<ProcessData.ProcessStep>","entity.process.ProcessData.ProcessStep.values"]},{"name":"fun values(): Array<ProcessEventsPayloads.RoomType>","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.values","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-room-type/values.html","searchKeys":["values","fun values(): Array<ProcessEventsPayloads.RoomType>","application.presenter.event.model.payloads.ProcessEventsPayloads.RoomType.values"]},{"name":"fun values(): Array<RoomData.RoomType>","description":"entity.room.RoomData.RoomType.values","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-type/values.html","searchKeys":["values","fun values(): Array<RoomData.RoomType>","entity.room.RoomData.RoomType.values"]},{"name":"fun where(whereClause: String): AdtQuery","description":"infrastructure.digitaltwin.query.AdtQuery.where","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/where.html","searchKeys":["where","fun where(whereClause: String): AdtQuery","infrastructure.digitaltwin.query.AdtQuery.where"]},{"name":"infix fun String.isOfModel(model: String): String","description":"infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils.isOfModel","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/-companion/-adt-query-utils/is-of-model.html","searchKeys":["isOfModel","infix fun String.isOfModel(model: String): String","infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils.isOfModel"]},{"name":"infix inline fun <T> String.eq(element: T): String","description":"infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils.eq","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/-companion/-adt-query-utils/eq.html","searchKeys":["eq","infix inline fun <T> String.eq(element: T): String","infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils.eq"]},{"name":"inline fun <T> Any?.cast(operation: T.() -> Boolean = { true }): Boolean","description":"application.handler.ProcessEventHandlers.cast","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/cast.html","searchKeys":["cast","inline fun <T> Any?.cast(operation: T.() -> Boolean = { true }): Boolean","application.handler.ProcessEventHandlers.cast"]},{"name":"inline fun <T> Any?.propertyAs(defaultValue: T): T","description":"infrastructure.digitaltwin.presenter.PropertyConversion.propertyAs","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-property-conversion/property-as.html","searchKeys":["propertyAs","inline fun <T> Any?.propertyAs(defaultValue: T): T","infrastructure.digitaltwin.presenter.PropertyConversion.propertyAs"]},{"name":"interface BookingRepository","description":"usecase.repository.BookingRepository","location":"surgical-process-monitoring-microservice/usecase.repository/-booking-repository/index.html","searchKeys":["BookingRepository","interface BookingRepository","usecase.repository.BookingRepository"]},{"name":"interface Event<out E>","description":"application.presenter.event.model.Event","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-event/index.html","searchKeys":["Event","interface Event<out E>","application.presenter.event.model.Event"]},{"name":"interface EventHandler","description":"application.handler.EventHandler","location":"surgical-process-monitoring-microservice/application.handler/-event-handler/index.html","searchKeys":["EventHandler","interface EventHandler","application.handler.EventHandler"]},{"name":"interface ManagerProvider","description":"infrastructure.provider.ManagerProvider","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider/index.html","searchKeys":["ManagerProvider","interface ManagerProvider","infrastructure.provider.ManagerProvider"]},{"name":"interface MedicalDeviceDatabaseManager","description":"application.controller.manager.MedicalDeviceDatabaseManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-database-manager/index.html","searchKeys":["MedicalDeviceDatabaseManager","interface MedicalDeviceDatabaseManager","application.controller.manager.MedicalDeviceDatabaseManager"]},{"name":"interface MedicalDeviceDigitalTwinManager","description":"application.controller.manager.MedicalDeviceDigitalTwinManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-medical-device-digital-twin-manager/index.html","searchKeys":["MedicalDeviceDigitalTwinManager","interface MedicalDeviceDigitalTwinManager","application.controller.manager.MedicalDeviceDigitalTwinManager"]},{"name":"interface MedicalDeviceRepository","description":"usecase.repository.MedicalDeviceRepository","location":"surgical-process-monitoring-microservice/usecase.repository/-medical-device-repository/index.html","searchKeys":["MedicalDeviceRepository","interface MedicalDeviceRepository","usecase.repository.MedicalDeviceRepository"]},{"name":"interface PatientDataPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientDataPayload","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-data-payload/index.html","searchKeys":["PatientDataPayload","interface PatientDataPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientDataPayload"]},{"name":"interface PatientDigitalTwinManager","description":"application.controller.manager.PatientDigitalTwinManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-digital-twin-manager/index.html","searchKeys":["PatientDigitalTwinManager","interface PatientDigitalTwinManager","application.controller.manager.PatientDigitalTwinManager"]},{"name":"interface PatientMedicalDataDatabaseManager","description":"application.controller.manager.PatientMedicalDataDatabaseManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-patient-medical-data-database-manager/index.html","searchKeys":["PatientMedicalDataDatabaseManager","interface PatientMedicalDataDatabaseManager","application.controller.manager.PatientMedicalDataDatabaseManager"]},{"name":"interface PatientRepository","description":"usecase.repository.PatientRepository","location":"surgical-process-monitoring-microservice/usecase.repository/-patient-repository/index.html","searchKeys":["PatientRepository","interface PatientRepository","usecase.repository.PatientRepository"]},{"name":"interface ProcessDatabaseManager : SurgicalProcessRepository","description":"application.controller.manager.ProcessDatabaseManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-database-manager/index.html","searchKeys":["ProcessDatabaseManager","interface ProcessDatabaseManager : SurgicalProcessRepository","application.controller.manager.ProcessDatabaseManager"]},{"name":"interface ProcessDigitalTwinManager","description":"application.controller.manager.ProcessDigitalTwinManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-process-digital-twin-manager/index.html","searchKeys":["ProcessDigitalTwinManager","interface ProcessDigitalTwinManager","application.controller.manager.ProcessDigitalTwinManager"]},{"name":"interface ProcessEventPayload","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessEventPayload","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-process-event-payload/index.html","searchKeys":["ProcessEventPayload","interface ProcessEventPayload","application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessEventPayload"]},{"name":"interface SurgeryBookingDigitalTwinManager","description":"application.controller.manager.SurgeryBookingDigitalTwinManager","location":"surgical-process-monitoring-microservice/application.controller.manager/-surgery-booking-digital-twin-manager/index.html","searchKeys":["SurgeryBookingDigitalTwinManager","interface SurgeryBookingDigitalTwinManager","application.controller.manager.SurgeryBookingDigitalTwinManager"]},{"name":"interface SurgicalProcessRepository","description":"usecase.repository.SurgicalProcessRepository","location":"surgical-process-monitoring-microservice/usecase.repository/-surgical-process-repository/index.html","searchKeys":["SurgicalProcessRepository","interface SurgicalProcessRepository","usecase.repository.SurgicalProcessRepository"]},{"name":"object AdtQueryUtils","description":"infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/-companion/-adt-query-utils/index.html","searchKeys":["AdtQueryUtils","object AdtQueryUtils","infrastructure.digitaltwin.query.AdtQuery.Companion.AdtQueryUtils"]},{"name":"object Companion","description":"infrastructure.api.ApiRouter.Companion","location":"surgical-process-monitoring-microservice/infrastructure.api/-api-router/-companion/index.html","searchKeys":["Companion","object Companion","infrastructure.api.ApiRouter.Companion"]},{"name":"object Companion","description":"infrastructure.database.DatabaseManager.Companion","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/-companion/index.html","searchKeys":["Companion","object Companion","infrastructure.database.DatabaseManager.Companion"]},{"name":"object Companion","description":"infrastructure.digitaltwin.DigitalTwinManager.Companion","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/-companion/index.html","searchKeys":["Companion","object Companion","infrastructure.digitaltwin.DigitalTwinManager.Companion"]},{"name":"object Companion","description":"infrastructure.digitaltwin.query.AdtQuery.Companion","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/-companion/index.html","searchKeys":["Companion","object Companion","infrastructure.digitaltwin.query.AdtQuery.Companion"]},{"name":"object Companion","description":"infrastructure.event.KafkaClient.Companion","location":"surgical-process-monitoring-microservice/infrastructure.event/-kafka-client/-companion/index.html","searchKeys":["Companion","object Companion","infrastructure.event.KafkaClient.Companion"]},{"name":"object EventSerialization","description":"application.presenter.event.serialization.EventSerialization","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-event-serialization/index.html","searchKeys":["EventSerialization","object EventSerialization","application.presenter.event.serialization.EventSerialization"]},{"name":"object HealthProfessionalData","description":"entity.healthprofessional.HealthProfessionalData","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/index.html","searchKeys":["HealthProfessionalData","object HealthProfessionalData","entity.healthprofessional.HealthProfessionalData"]},{"name":"object MedicalDeviceAdt","description":"infrastructure.digitaltwin.presenter.MedicalDeviceAdt","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-medical-device-adt/index.html","searchKeys":["MedicalDeviceAdt","object MedicalDeviceAdt","infrastructure.digitaltwin.presenter.MedicalDeviceAdt"]},{"name":"object MedicalDeviceData","description":"entity.medicaldevice.MedicalDeviceData","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/index.html","searchKeys":["MedicalDeviceData","object MedicalDeviceData","entity.medicaldevice.MedicalDeviceData"]},{"name":"object MedicalDeviceServices","description":"application.service.MedicalDeviceServices","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/index.html","searchKeys":["MedicalDeviceServices","object MedicalDeviceServices","application.service.MedicalDeviceServices"]},{"name":"object MedicalTechnologyAdt","description":"infrastructure.digitaltwin.presenter.MedicalTechnologyAdt","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-medical-technology-adt/index.html","searchKeys":["MedicalTechnologyAdt","object MedicalTechnologyAdt","infrastructure.digitaltwin.presenter.MedicalTechnologyAdt"]},{"name":"object PatientAdt","description":"infrastructure.digitaltwin.presenter.PatientAdt","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-patient-adt/index.html","searchKeys":["PatientAdt","object PatientAdt","infrastructure.digitaltwin.presenter.PatientAdt"]},{"name":"object PatientData","description":"entity.patient.PatientData","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/index.html","searchKeys":["PatientData","object PatientData","entity.patient.PatientData"]},{"name":"object PatientDataServices","description":"application.service.PatientDataServices","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/index.html","searchKeys":["PatientDataServices","object PatientDataServices","application.service.PatientDataServices"]},{"name":"object PatientEventHandlers","description":"application.handler.PatientEventHandlers","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/index.html","searchKeys":["PatientEventHandlers","object PatientEventHandlers","application.handler.PatientEventHandlers"]},{"name":"object ProcessData","description":"entity.process.ProcessData","location":"surgical-process-monitoring-microservice/entity.process/-process-data/index.html","searchKeys":["ProcessData","object ProcessData","entity.process.ProcessData"]},{"name":"object ProcessEventHandlers","description":"application.handler.ProcessEventHandlers","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/index.html","searchKeys":["ProcessEventHandlers","object ProcessEventHandlers","application.handler.ProcessEventHandlers"]},{"name":"object ProcessEventsKeys","description":"application.presenter.event.model.ProcessEventsKeys","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-events-keys/index.html","searchKeys":["ProcessEventsKeys","object ProcessEventsKeys","application.presenter.event.model.ProcessEventsKeys"]},{"name":"object ProcessEventsPayloads","description":"application.presenter.event.model.payloads.ProcessEventsPayloads","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/index.html","searchKeys":["ProcessEventsPayloads","object ProcessEventsPayloads","application.presenter.event.model.payloads.ProcessEventsPayloads"]},{"name":"object PropertyConversion","description":"infrastructure.digitaltwin.presenter.PropertyConversion","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-property-conversion/index.html","searchKeys":["PropertyConversion","object PropertyConversion","infrastructure.digitaltwin.presenter.PropertyConversion"]},{"name":"object RoomData","description":"entity.room.RoomData","location":"surgical-process-monitoring-microservice/entity.room/-room-data/index.html","searchKeys":["RoomData","object RoomData","entity.room.RoomData"]},{"name":"object SurgeryBookingAdt","description":"infrastructure.digitaltwin.presenter.SurgeryBookingAdt","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgery-booking-adt/index.html","searchKeys":["SurgeryBookingAdt","object SurgeryBookingAdt","infrastructure.digitaltwin.presenter.SurgeryBookingAdt"]},{"name":"object SurgeryBookingData","description":"entity.booking.SurgeryBookingData","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking-data/index.html","searchKeys":["SurgeryBookingData","object SurgeryBookingData","entity.booking.SurgeryBookingData"]},{"name":"object SurgeryBookingServices","description":"application.service.SurgeryBookingServices","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/index.html","searchKeys":["SurgeryBookingServices","object SurgeryBookingServices","application.service.SurgeryBookingServices"]},{"name":"object SurgicalProcessAdt","description":"infrastructure.digitaltwin.presenter.SurgicalProcessAdt","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.presenter/-surgical-process-adt/index.html","searchKeys":["SurgicalProcessAdt","object SurgicalProcessAdt","infrastructure.digitaltwin.presenter.SurgicalProcessAdt"]},{"name":"object SurgicalProcessServices","description":"application.service.SurgicalProcessServices","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/index.html","searchKeys":["SurgicalProcessServices","object SurgicalProcessServices","application.service.SurgicalProcessServices"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.booking.SurgeryBooking.equals","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.booking.SurgeryBooking.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.healthprofessional.HealthProfessional.equals","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.healthprofessional.HealthProfessional.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.medicaldevice.ImplantableMedicalDevice.equals","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.medicaldevice.ImplantableMedicalDevice.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.medicaldevice.MedicalTechnology.equals","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.medicaldevice.MedicalTechnology.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.patient.Patient.equals","location":"surgical-process-monitoring-microservice/entity.patient/-patient/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.patient.Patient.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.process.SurgicalProcess.equals","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.process.SurgicalProcess.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"entity.room.Room.equals","location":"surgical-process-monitoring-microservice/entity.room/-room/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","entity.room.Room.equals"]},{"name":"open override fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","description":"application.controller.MedicalDeviceController.addMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/add-medical-device-usage.html","searchKeys":["addMedicalDeviceUsage","open override fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","application.controller.MedicalDeviceController.addMedicalDeviceUsage"]},{"name":"open override fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","description":"infrastructure.database.DatabaseManager.addMedicalDeviceUsage","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/add-medical-device-usage.html","searchKeys":["addMedicalDeviceUsage","open override fun addMedicalDeviceUsage(medicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId, processId: ProcessData.ProcessId): Boolean","infrastructure.database.DatabaseManager.addMedicalDeviceUsage"]},{"name":"open override fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, dateTime: Instant, processId: ProcessData.ProcessId, inUse: Boolean): Boolean","description":"infrastructure.database.DatabaseManager.addMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/add-medical-technology-usage.html","searchKeys":["addMedicalTechnologyUsage","open override fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, dateTime: Instant, processId: ProcessData.ProcessId, inUse: Boolean): Boolean","infrastructure.database.DatabaseManager.addMedicalTechnologyUsage"]},{"name":"open override fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean): Boolean","description":"application.controller.MedicalDeviceController.addMedicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/add-medical-technology-usage.html","searchKeys":["addMedicalTechnologyUsage","open override fun addMedicalTechnologyUsage(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, processId: ProcessData.ProcessId, dateTime: Instant, inUse: Boolean): Boolean","application.controller.MedicalDeviceController.addMedicalTechnologyUsage"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-body-temperature-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-diastolic-pressure-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-heartbeat-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-patient-on-operating-table-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-respiratory-rate-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.SaturationUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-saturation-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.SaturationUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-systolic-pressure-update-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-emergency-surgery-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-device-usage-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-technology-usage-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.ProcessEventHandlers.PatientTrackedEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-patient-tracked-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.ProcessEventHandlers.PatientTrackedEventHandler.canHandle"]},{"name":"open override fun canHandle(event: Event<*>): Boolean","description":"application.handler.ProcessEventHandlers.ProcessManualEventHandler.canHandle","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-process-manual-event-handler/can-handle.html","searchKeys":["canHandle","open override fun canHandle(event: Event<*>): Boolean","application.handler.ProcessEventHandlers.ProcessManualEventHandler.canHandle"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-body-temperature-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.BodyTemperatureUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-diastolic-pressure-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.DiastolicPressureUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-heartbeat-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.HeartbeatUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-patient-on-operating-table-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.PatientOnOperatingTableEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-respiratory-rate-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.RespiratoryRateUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.SaturationUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-saturation-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.SaturationUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-patient-event-handlers/-systolic-pressure-update-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.PatientEventHandlers.SystolicPressureUpdateEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-emergency-surgery-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.ProcessEventHandlers.EmergencySurgeryEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-device-usage-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.ProcessEventHandlers.MedicalDeviceUsageEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-medical-technology-usage-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.ProcessEventHandlers.MedicalTechnologyUsageEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.ProcessEventHandlers.PatientTrackedEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-patient-tracked-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.ProcessEventHandlers.PatientTrackedEventHandler.consume"]},{"name":"open override fun consume(event: Event<*>)","description":"application.handler.ProcessEventHandlers.ProcessManualEventHandler.consume","location":"surgical-process-monitoring-microservice/application.handler/-process-event-handlers/-process-manual-event-handler/consume.html","searchKeys":["consume","open override fun consume(event: Event<*>)","application.handler.ProcessEventHandlers.ProcessManualEventHandler.consume"]},{"name":"open override fun createPatient(patientId: PatientData.PatientId): Patient?","description":"application.controller.PatientDataController.createPatient","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/create-patient.html","searchKeys":["createPatient","open override fun createPatient(patientId: PatientData.PatientId): Patient?","application.controller.PatientDataController.createPatient"]},{"name":"open override fun createPatientDT(patientId: PatientData.PatientId): Patient?","description":"infrastructure.digitaltwin.DigitalTwinManager.createPatientDT","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/create-patient-d-t.html","searchKeys":["createPatientDT","open override fun createPatientDT(patientId: PatientData.PatientId): Patient?","infrastructure.digitaltwin.DigitalTwinManager.createPatientDT"]},{"name":"open override fun createSurgicalProcess(process: SurgicalProcess): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.createSurgicalProcess","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/create-surgical-process.html","searchKeys":["createSurgicalProcess","open override fun createSurgicalProcess(process: SurgicalProcess): Boolean","infrastructure.digitaltwin.DigitalTwinManager.createSurgicalProcess"]},{"name":"open override fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","description":"application.controller.SurgicalProcessController.createSurgicalProcess","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/create-surgical-process.html","searchKeys":["createSurgicalProcess","open override fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","application.controller.SurgicalProcessController.createSurgicalProcess"]},{"name":"open override fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","description":"infrastructure.database.DatabaseManager.createSurgicalProcess","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/create-surgical-process.html","searchKeys":["createSurgicalProcess","open override fun createSurgicalProcess(process: SurgicalProcess): SurgicalProcess?","infrastructure.database.DatabaseManager.createSurgicalProcess"]},{"name":"open override fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","description":"application.controller.MedicalDeviceController.deleteMedicalDevice","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/delete-medical-device.html","searchKeys":["deleteMedicalDevice","open override fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","application.controller.MedicalDeviceController.deleteMedicalDevice"]},{"name":"open override fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.deleteMedicalDevice","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/delete-medical-device.html","searchKeys":["deleteMedicalDevice","open override fun deleteMedicalDevice(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): Boolean","infrastructure.digitaltwin.DigitalTwinManager.deleteMedicalDevice"]},{"name":"open override fun deletePatient(patientId: PatientData.PatientId): Boolean","description":"application.controller.PatientDataController.deletePatient","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/delete-patient.html","searchKeys":["deletePatient","open override fun deletePatient(patientId: PatientData.PatientId): Boolean","application.controller.PatientDataController.deletePatient"]},{"name":"open override fun deletePatientDT(patientId: PatientData.PatientId): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.deletePatientDT","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/delete-patient-d-t.html","searchKeys":["deletePatientDT","open override fun deletePatientDT(patientId: PatientData.PatientId): Boolean","infrastructure.digitaltwin.DigitalTwinManager.deletePatientDT"]},{"name":"open override fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"application.controller.SurgeryBookingController.deleteSurgeryBooking","location":"surgical-process-monitoring-microservice/application.controller/-surgery-booking-controller/delete-surgery-booking.html","searchKeys":["deleteSurgeryBooking","open override fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","application.controller.SurgeryBookingController.deleteSurgeryBooking"]},{"name":"open override fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.deleteSurgeryBooking","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/delete-surgery-booking.html","searchKeys":["deleteSurgeryBooking","open override fun deleteSurgeryBooking(bookingId: SurgeryBookingData.SurgeryBookingId): Boolean","infrastructure.digitaltwin.DigitalTwinManager.deleteSurgeryBooking"]},{"name":"open override fun deleteSurgicalProcess(processId: ProcessData.ProcessId): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.deleteSurgicalProcess","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/delete-surgical-process.html","searchKeys":["deleteSurgicalProcess","open override fun deleteSurgicalProcess(processId: ProcessData.ProcessId): Boolean","infrastructure.digitaltwin.DigitalTwinManager.deleteSurgicalProcess"]},{"name":"open override fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","description":"application.controller.SurgicalProcessController.deleteSurgicalProcess","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/delete-surgical-process.html","searchKeys":["deleteSurgicalProcess","open override fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","application.controller.SurgicalProcessController.deleteSurgicalProcess"]},{"name":"open override fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","description":"infrastructure.database.DatabaseManager.deleteSurgicalProcess","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/delete-surgical-process.html","searchKeys":["deleteSurgicalProcess","open override fun deleteSurgicalProcess(surgicalProcessId: ProcessData.ProcessId): Boolean","infrastructure.database.DatabaseManager.deleteSurgicalProcess"]},{"name":"open override fun execute(): Boolean","description":"application.service.MedicalDeviceServices.AddMedicalDeviceUsage.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-device-usage/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.MedicalDeviceServices.AddMedicalDeviceUsage.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.MedicalDeviceServices.AddMedicalTechnologyUsage.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-add-medical-technology-usage/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.MedicalDeviceServices.AddMedicalTechnologyUsage.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-delete-implantable-medical-device/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.MedicalDeviceServices.DeleteImplantableMedicalDevice.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.PatientDataServices.DeletePatient.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-delete-patient/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.PatientDataServices.DeletePatient.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.PatientDataServices.UpdatePatientMedicalData.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-update-patient-medical-data/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.PatientDataServices.UpdatePatientMedicalData.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.SurgeryBookingServices.DeleteSurgeryBooking.execute","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-delete-surgery-booking/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.SurgeryBookingServices.DeleteSurgeryBooking.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.SurgicalProcessServices.DeleteSurgicalProcess.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-delete-surgical-process/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.SurgicalProcessServices.DeleteSurgicalProcess.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-room/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.SurgicalProcessServices.UpdateSurgicalProcessRoom.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessState.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-state/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.SurgicalProcessServices.UpdateSurgicalProcessState.execute"]},{"name":"open override fun execute(): Boolean","description":"application.service.SurgicalProcessServices.UpdateSurgicalProcessStep.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-update-surgical-process-step/execute.html","searchKeys":["execute","open override fun execute(): Boolean","application.service.SurgicalProcessServices.UpdateSurgicalProcessStep.execute"]},{"name":"open override fun execute(): ImplantableMedicalDevice?","description":"application.service.MedicalDeviceServices.GetMedicalDeviceById.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-by-id/execute.html","searchKeys":["execute","open override fun execute(): ImplantableMedicalDevice?","application.service.MedicalDeviceServices.GetMedicalDeviceById.execute"]},{"name":"open override fun execute(): List<MedicalDeviceData.ImplantableMedicalDeviceId>","description":"application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-device-usage-by-process-id/execute.html","searchKeys":["execute","open override fun execute(): List<MedicalDeviceData.ImplantableMedicalDeviceId>","application.service.MedicalDeviceServices.GetMedicalDeviceUsageByProcessId.execute"]},{"name":"open override fun execute(): List<Pair<Instant, PatientData.MedicalData>>","description":"application.service.PatientDataServices.GetPatientMedicalData.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-medical-data/execute.html","searchKeys":["execute","open override fun execute(): List<Pair<Instant, PatientData.MedicalData>>","application.service.PatientDataServices.GetPatientMedicalData.execute"]},{"name":"open override fun execute(): List<Pair<Instant, ProcessData.ProcessState>>","description":"application.service.SurgicalProcessServices.GetSurgicalProcessStates.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-states/execute.html","searchKeys":["execute","open override fun execute(): List<Pair<Instant, ProcessData.ProcessState>>","application.service.SurgicalProcessServices.GetSurgicalProcessStates.execute"]},{"name":"open override fun execute(): List<Pair<Instant, ProcessData.ProcessStep>>","description":"application.service.SurgicalProcessServices.GetSurgicalProcessSteps.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-steps/execute.html","searchKeys":["execute","open override fun execute(): List<Pair<Instant, ProcessData.ProcessStep>>","application.service.SurgicalProcessServices.GetSurgicalProcessSteps.execute"]},{"name":"open override fun execute(): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-usage-by-process-id/execute.html","searchKeys":["execute","open override fun execute(): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","application.service.MedicalDeviceServices.GetMedicalTechnologyUsageByProcessId.execute"]},{"name":"open override fun execute(): MedicalTechnology?","description":"application.service.MedicalDeviceServices.GetMedicalTechnologyById.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-get-medical-technology-by-id/execute.html","searchKeys":["execute","open override fun execute(): MedicalTechnology?","application.service.MedicalDeviceServices.GetMedicalTechnologyById.execute"]},{"name":"open override fun execute(): Patient?","description":"application.service.PatientDataServices.CreatePatient.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-create-patient/execute.html","searchKeys":["execute","open override fun execute(): Patient?","application.service.PatientDataServices.CreatePatient.execute"]},{"name":"open override fun execute(): PatientData.MedicalData?","description":"application.service.PatientDataServices.GetCurrentPatientMedicalData.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-current-patient-medical-data/execute.html","searchKeys":["execute","open override fun execute(): PatientData.MedicalData?","application.service.PatientDataServices.GetCurrentPatientMedicalData.execute"]},{"name":"open override fun execute(): PatientData.TaxCode?","description":"application.service.PatientDataServices.GetPatientTaxCode.execute","location":"surgical-process-monitoring-microservice/application.service/-patient-data-services/-get-patient-tax-code/execute.html","searchKeys":["execute","open override fun execute(): PatientData.TaxCode?","application.service.PatientDataServices.GetPatientTaxCode.execute"]},{"name":"open override fun execute(): ProcessData.ProcessId?","description":"application.service.MedicalDeviceServices.FindProcessByMedicalTechnology.execute","location":"surgical-process-monitoring-microservice/application.service/-medical-device-services/-find-process-by-medical-technology/execute.html","searchKeys":["execute","open override fun execute(): ProcessData.ProcessId?","application.service.MedicalDeviceServices.FindProcessByMedicalTechnology.execute"]},{"name":"open override fun execute(): Set<SurgicalProcess>","description":"application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-current-surgical-processes/execute.html","searchKeys":["execute","open override fun execute(): Set<SurgicalProcess>","application.service.SurgicalProcessServices.GetCurrentSurgicalProcesses.execute"]},{"name":"open override fun execute(): SurgeryBooking?","description":"application.service.SurgeryBookingServices.GetSurgeryBookingByPatient.execute","location":"surgical-process-monitoring-microservice/application.service/-surgery-booking-services/-get-surgery-booking-by-patient/execute.html","searchKeys":["execute","open override fun execute(): SurgeryBooking?","application.service.SurgeryBookingServices.GetSurgeryBookingByPatient.execute"]},{"name":"open override fun execute(): SurgicalProcess?","description":"application.service.SurgicalProcessServices.CreateSurgicalProcess.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-create-surgical-process/execute.html","searchKeys":["execute","open override fun execute(): SurgicalProcess?","application.service.SurgicalProcessServices.CreateSurgicalProcess.execute"]},{"name":"open override fun execute(): SurgicalProcess?","description":"application.service.SurgicalProcessServices.GetSurgicalProcessById.execute","location":"surgical-process-monitoring-microservice/application.service/-surgical-process-services/-get-surgical-process-by-id/execute.html","searchKeys":["execute","open override fun execute(): SurgicalProcess?","application.service.SurgicalProcessServices.GetSurgicalProcessById.execute"]},{"name":"open override fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","description":"application.controller.MedicalDeviceController.findSurgicalProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/find-surgical-process-by-medical-technology.html","searchKeys":["findSurgicalProcessByMedicalTechnology","open override fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","application.controller.MedicalDeviceController.findSurgicalProcessByMedicalTechnology"]},{"name":"open override fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","description":"infrastructure.digitaltwin.DigitalTwinManager.findSurgicalProcessByMedicalTechnology","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/find-surgical-process-by-medical-technology.html","searchKeys":["findSurgicalProcessByMedicalTechnology","open override fun findSurgicalProcessByMedicalTechnology(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId): ProcessData.ProcessId?","infrastructure.digitaltwin.DigitalTwinManager.findSurgicalProcessByMedicalTechnology"]},{"name":"open override fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData","description":"infrastructure.database.DatabaseManager.getCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-current-patient-medical-data.html","searchKeys":["getCurrentPatientMedicalData","open override fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData","infrastructure.database.DatabaseManager.getCurrentPatientMedicalData"]},{"name":"open override fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","description":"application.controller.PatientDataController.getCurrentPatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/get-current-patient-medical-data.html","searchKeys":["getCurrentPatientMedicalData","open override fun getCurrentPatientMedicalData(patientId: PatientData.PatientId): PatientData.MedicalData?","application.controller.PatientDataController.getCurrentPatientMedicalData"]},{"name":"open override fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","description":"application.controller.SurgicalProcessController.getCurrentSurgicalProcesses","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/get-current-surgical-processes.html","searchKeys":["getCurrentSurgicalProcesses","open override fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","application.controller.SurgicalProcessController.getCurrentSurgicalProcesses"]},{"name":"open override fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","description":"infrastructure.database.DatabaseManager.getCurrentSurgicalProcesses","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-current-surgical-processes.html","searchKeys":["getCurrentSurgicalProcesses","open override fun getCurrentSurgicalProcesses(): Set<SurgicalProcess>","infrastructure.database.DatabaseManager.getCurrentSurgicalProcesses"]},{"name":"open override fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","description":"application.controller.MedicalDeviceController.getMedicalDeviceById","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/get-medical-device-by-id.html","searchKeys":["getMedicalDeviceById","open override fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","application.controller.MedicalDeviceController.getMedicalDeviceById"]},{"name":"open override fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","description":"infrastructure.digitaltwin.DigitalTwinManager.getMedicalDeviceById","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/get-medical-device-by-id.html","searchKeys":["getMedicalDeviceById","open override fun getMedicalDeviceById(implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId): ImplantableMedicalDevice?","infrastructure.digitaltwin.DigitalTwinManager.getMedicalDeviceById"]},{"name":"open override fun getMedicalDeviceTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","description":"infrastructure.database.DatabaseManager.getMedicalDeviceTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-medical-device-technology-usage-by-process-id.html","searchKeys":["getMedicalDeviceTechnologyUsageByProcessId","open override fun getMedicalDeviceTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","infrastructure.database.DatabaseManager.getMedicalDeviceTechnologyUsageByProcessId"]},{"name":"open override fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","description":"application.controller.MedicalDeviceController.getMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/get-medical-device-usage-by-process-id.html","searchKeys":["getMedicalDeviceUsageByProcessId","open override fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","application.controller.MedicalDeviceController.getMedicalDeviceUsageByProcessId"]},{"name":"open override fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","description":"infrastructure.database.DatabaseManager.getMedicalDeviceUsageByProcessId","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-medical-device-usage-by-process-id.html","searchKeys":["getMedicalDeviceUsageByProcessId","open override fun getMedicalDeviceUsageByProcessId(processId: ProcessData.ProcessId): List<MedicalDeviceData.ImplantableMedicalDeviceId>","infrastructure.database.DatabaseManager.getMedicalDeviceUsageByProcessId"]},{"name":"open override fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","description":"application.controller.MedicalDeviceController.getMedicalTechnologyById","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/get-medical-technology-by-id.html","searchKeys":["getMedicalTechnologyById","open override fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","application.controller.MedicalDeviceController.getMedicalTechnologyById"]},{"name":"open override fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","description":"infrastructure.digitaltwin.DigitalTwinManager.getMedicalTechnologyById","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/get-medical-technology-by-id.html","searchKeys":["getMedicalTechnologyById","open override fun getMedicalTechnologyById(medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId, inUse: Boolean): MedicalTechnology?","infrastructure.digitaltwin.DigitalTwinManager.getMedicalTechnologyById"]},{"name":"open override fun getMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","description":"application.controller.MedicalDeviceController.getMedicalTechnologyUsageByProcessId","location":"surgical-process-monitoring-microservice/application.controller/-medical-device-controller/get-medical-technology-usage-by-process-id.html","searchKeys":["getMedicalTechnologyUsageByProcessId","open override fun getMedicalTechnologyUsageByProcessId(processId: ProcessData.ProcessId): List<Triple<Instant, MedicalDeviceData.MedicalTechnologyId, Boolean>>","application.controller.MedicalDeviceController.getMedicalTechnologyUsageByProcessId"]},{"name":"open override fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","description":"application.controller.PatientDataController.getPatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/get-patient-medical-data.html","searchKeys":["getPatientMedicalData","open override fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","application.controller.PatientDataController.getPatientMedicalData"]},{"name":"open override fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","description":"infrastructure.database.DatabaseManager.getPatientMedicalData","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-patient-medical-data.html","searchKeys":["getPatientMedicalData","open override fun getPatientMedicalData(patientId: PatientData.PatientId, from: Instant, to: Instant): List<Pair<Instant, PatientData.MedicalData>>","infrastructure.database.DatabaseManager.getPatientMedicalData"]},{"name":"open override fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","description":"application.controller.PatientDataController.getPatientTaxCode","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/get-patient-tax-code.html","searchKeys":["getPatientTaxCode","open override fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","application.controller.PatientDataController.getPatientTaxCode"]},{"name":"open override fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","description":"infrastructure.digitaltwin.DigitalTwinManager.getPatientTaxCode","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/get-patient-tax-code.html","searchKeys":["getPatientTaxCode","open override fun getPatientTaxCode(patientId: PatientData.PatientId): PatientData.TaxCode?","infrastructure.digitaltwin.DigitalTwinManager.getPatientTaxCode"]},{"name":"open override fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","description":"application.controller.SurgeryBookingController.getSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/application.controller/-surgery-booking-controller/get-surgery-booking-by-patient.html","searchKeys":["getSurgeryBookingByPatient","open override fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","application.controller.SurgeryBookingController.getSurgeryBookingByPatient"]},{"name":"open override fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","description":"infrastructure.digitaltwin.DigitalTwinManager.getSurgeryBookingByPatient","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/get-surgery-booking-by-patient.html","searchKeys":["getSurgeryBookingByPatient","open override fun getSurgeryBookingByPatient(patientId: PatientData.PatientId): SurgeryBooking?","infrastructure.digitaltwin.DigitalTwinManager.getSurgeryBookingByPatient"]},{"name":"open override fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","description":"application.controller.SurgicalProcessController.getSurgicalProcessById","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/get-surgical-process-by-id.html","searchKeys":["getSurgicalProcessById","open override fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","application.controller.SurgicalProcessController.getSurgicalProcessById"]},{"name":"open override fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","description":"infrastructure.database.DatabaseManager.getSurgicalProcessById","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-surgical-process-by-id.html","searchKeys":["getSurgicalProcessById","open override fun getSurgicalProcessById(processId: ProcessData.ProcessId): SurgicalProcess?","infrastructure.database.DatabaseManager.getSurgicalProcessById"]},{"name":"open override fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","description":"application.controller.SurgicalProcessController.getSurgicalProcessStates","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/get-surgical-process-states.html","searchKeys":["getSurgicalProcessStates","open override fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","application.controller.SurgicalProcessController.getSurgicalProcessStates"]},{"name":"open override fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","description":"infrastructure.database.DatabaseManager.getSurgicalProcessStates","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-surgical-process-states.html","searchKeys":["getSurgicalProcessStates","open override fun getSurgicalProcessStates(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessState>>","infrastructure.database.DatabaseManager.getSurgicalProcessStates"]},{"name":"open override fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","description":"application.controller.SurgicalProcessController.getSurgicalProcessSteps","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/get-surgical-process-steps.html","searchKeys":["getSurgicalProcessSteps","open override fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","application.controller.SurgicalProcessController.getSurgicalProcessSteps"]},{"name":"open override fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","description":"infrastructure.database.DatabaseManager.getSurgicalProcessSteps","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/get-surgical-process-steps.html","searchKeys":["getSurgicalProcessSteps","open override fun getSurgicalProcessSteps(surgicalProcessId: ProcessData.ProcessId): List<Pair<Instant, ProcessData.ProcessStep>>","infrastructure.database.DatabaseManager.getSurgicalProcessSteps"]},{"name":"open override fun hashCode(): Int","description":"entity.booking.SurgeryBooking.hashCode","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.booking.SurgeryBooking.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.healthprofessional.HealthProfessional.hashCode","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.healthprofessional.HealthProfessional.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.medicaldevice.ImplantableMedicalDevice.hashCode","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.medicaldevice.ImplantableMedicalDevice.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.medicaldevice.MedicalTechnology.hashCode","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.medicaldevice.MedicalTechnology.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.patient.Patient.hashCode","location":"surgical-process-monitoring-microservice/entity.patient/-patient/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.patient.Patient.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.process.SurgicalProcess.hashCode","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.process.SurgicalProcess.hashCode"]},{"name":"open override fun hashCode(): Int","description":"entity.room.Room.hashCode","location":"surgical-process-monitoring-microservice/entity.room/-room/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","entity.room.Room.hashCode"]},{"name":"open override fun produceEvent(event: Event<*>)","description":"infrastructure.event.KafkaClient.produceEvent","location":"surgical-process-monitoring-microservice/infrastructure.event/-kafka-client/produce-event.html","searchKeys":["produceEvent","open override fun produceEvent(event: Event<*>)","infrastructure.event.KafkaClient.produceEvent"]},{"name":"open override fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"application.controller.SurgeryBookingController.removePatientSurgeryBookingMapping","location":"surgical-process-monitoring-microservice/application.controller/-surgery-booking-controller/remove-patient-surgery-booking-mapping.html","searchKeys":["removePatientSurgeryBookingMapping","open override fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","application.controller.SurgeryBookingController.removePatientSurgeryBookingMapping"]},{"name":"open override fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.removePatientSurgeryBookingMapping","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/remove-patient-surgery-booking-mapping.html","searchKeys":["removePatientSurgeryBookingMapping","open override fun removePatientSurgeryBookingMapping(patientId: PatientData.PatientId, surgeryBookingId: SurgeryBookingData.SurgeryBookingId): Boolean","infrastructure.digitaltwin.DigitalTwinManager.removePatientSurgeryBookingMapping"]},{"name":"open override fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","description":"application.controller.PatientDataController.updatePatientMedicalData","location":"surgical-process-monitoring-microservice/application.controller/-patient-data-controller/update-patient-medical-data.html","searchKeys":["updatePatientMedicalData","open override fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","application.controller.PatientDataController.updatePatientMedicalData"]},{"name":"open override fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","description":"infrastructure.database.DatabaseManager.updatePatientMedicalData","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/update-patient-medical-data.html","searchKeys":["updatePatientMedicalData","open override fun updatePatientMedicalData(patientId: PatientData.PatientId, medicalData: PatientData.MedicalData, dateTime: Instant): Boolean","infrastructure.database.DatabaseManager.updatePatientMedicalData"]},{"name":"open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","description":"application.controller.SurgicalProcessController.updateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/update-surgical-process-room.html","searchKeys":["updateSurgicalProcessRoom","open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","application.controller.SurgicalProcessController.updateSurgicalProcessRoom"]},{"name":"open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","description":"infrastructure.database.DatabaseManager.updateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/update-surgical-process-room.html","searchKeys":["updateSurgicalProcessRoom","open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","infrastructure.database.DatabaseManager.updateSurgicalProcessRoom"]},{"name":"open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessRoom","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/update-surgical-process-room.html","searchKeys":["updateSurgicalProcessRoom","open override fun updateSurgicalProcessRoom(processId: ProcessData.ProcessId, latestRoomId: String?, room: Room): Boolean","infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessRoom"]},{"name":"open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","description":"application.controller.SurgicalProcessController.updateSurgicalProcessState","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/update-surgical-process-state.html","searchKeys":["updateSurgicalProcessState","open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","application.controller.SurgicalProcessController.updateSurgicalProcessState"]},{"name":"open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","description":"infrastructure.database.DatabaseManager.updateSurgicalProcessState","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/update-surgical-process-state.html","searchKeys":["updateSurgicalProcessState","open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, dateTime: Instant, state: ProcessData.ProcessState): Boolean","infrastructure.database.DatabaseManager.updateSurgicalProcessState"]},{"name":"open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, state: ProcessData.ProcessState): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessState","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/update-surgical-process-state.html","searchKeys":["updateSurgicalProcessState","open override fun updateSurgicalProcessState(processId: ProcessData.ProcessId, state: ProcessData.ProcessState): Boolean","infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessState"]},{"name":"open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","description":"application.controller.SurgicalProcessController.updateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/application.controller/-surgical-process-controller/update-surgical-process-step.html","searchKeys":["updateSurgicalProcessStep","open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","application.controller.SurgicalProcessController.updateSurgicalProcessStep"]},{"name":"open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","description":"infrastructure.database.DatabaseManager.updateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/update-surgical-process-step.html","searchKeys":["updateSurgicalProcessStep","open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, dateTime: Instant, step: ProcessData.ProcessStep): Boolean","infrastructure.database.DatabaseManager.updateSurgicalProcessStep"]},{"name":"open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, step: ProcessData.ProcessStep): Boolean","description":"infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessStep","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin/-digital-twin-manager/update-surgical-process-step.html","searchKeys":["updateSurgicalProcessStep","open override fun updateSurgicalProcessStep(processId: ProcessData.ProcessId, step: ProcessData.ProcessStep): Boolean","infrastructure.digitaltwin.DigitalTwinManager.updateSurgicalProcessStep"]},{"name":"open override val data: E","description":"application.presenter.event.model.ProcessEvent.data","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-event/data.html","searchKeys":["data","open override val data: E","application.presenter.event.model.ProcessEvent.data"]},{"name":"open override val data: E","description":"application.presenter.event.model.SurgeryReportEvent.data","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-surgery-report-event/data.html","searchKeys":["data","open override val data: E","application.presenter.event.model.SurgeryReportEvent.data"]},{"name":"open override val dateTime: String","description":"application.presenter.event.model.ProcessEvent.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-event/date-time.html","searchKeys":["dateTime","open override val dateTime: String","application.presenter.event.model.ProcessEvent.dateTime"]},{"name":"open override val dateTime: String","description":"application.presenter.event.model.SurgeryReportEvent.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-surgery-report-event/date-time.html","searchKeys":["dateTime","open override val dateTime: String","application.presenter.event.model.SurgeryReportEvent.dateTime"]},{"name":"open override val key: String","description":"application.presenter.event.model.ProcessEvent.key","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-process-event/key.html","searchKeys":["key","open override val key: String","application.presenter.event.model.ProcessEvent.key"]},{"name":"open override val key: String","description":"application.presenter.event.model.SurgeryReportEvent.key","location":"surgical-process-monitoring-microservice/application.presenter.event.model/-surgery-report-event/key.html","searchKeys":["key","open override val key: String","application.presenter.event.model.SurgeryReportEvent.key"]},{"name":"open override val medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager","description":"infrastructure.provider.ManagerProviderImpl.medicalDeviceDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/medical-device-database-manager.html","searchKeys":["medicalDeviceDatabaseManager","open override val medicalDeviceDatabaseManager: MedicalDeviceDatabaseManager","infrastructure.provider.ManagerProviderImpl.medicalDeviceDatabaseManager"]},{"name":"open override val medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager","description":"infrastructure.provider.ManagerProviderImpl.medicalDeviceDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/medical-device-digital-twin-manager.html","searchKeys":["medicalDeviceDigitalTwinManager","open override val medicalDeviceDigitalTwinManager: MedicalDeviceDigitalTwinManager","infrastructure.provider.ManagerProviderImpl.medicalDeviceDigitalTwinManager"]},{"name":"open override val patientDigitalTwinManager: PatientDigitalTwinManager","description":"infrastructure.provider.ManagerProviderImpl.patientDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/patient-digital-twin-manager.html","searchKeys":["patientDigitalTwinManager","open override val patientDigitalTwinManager: PatientDigitalTwinManager","infrastructure.provider.ManagerProviderImpl.patientDigitalTwinManager"]},{"name":"open override val patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager","description":"infrastructure.provider.ManagerProviderImpl.patientMedicalDataDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/patient-medical-data-database-manager.html","searchKeys":["patientMedicalDataDatabaseManager","open override val patientMedicalDataDatabaseManager: PatientMedicalDataDatabaseManager","infrastructure.provider.ManagerProviderImpl.patientMedicalDataDatabaseManager"]},{"name":"open override val processDatabaseManager: ProcessDatabaseManager","description":"infrastructure.provider.ManagerProviderImpl.processDatabaseManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/process-database-manager.html","searchKeys":["processDatabaseManager","open override val processDatabaseManager: ProcessDatabaseManager","infrastructure.provider.ManagerProviderImpl.processDatabaseManager"]},{"name":"open override val processDigitalTwinManager: ProcessDigitalTwinManager","description":"infrastructure.provider.ManagerProviderImpl.processDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/process-digital-twin-manager.html","searchKeys":["processDigitalTwinManager","open override val processDigitalTwinManager: ProcessDigitalTwinManager","infrastructure.provider.ManagerProviderImpl.processDigitalTwinManager"]},{"name":"open override val surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager","description":"infrastructure.provider.ManagerProviderImpl.surgeryBookingDigitalTwinManager","location":"surgical-process-monitoring-microservice/infrastructure.provider/-manager-provider-impl/surgery-booking-digital-twin-manager.html","searchKeys":["surgeryBookingDigitalTwinManager","open override val surgeryBookingDigitalTwinManager: SurgeryBookingDigitalTwinManager","infrastructure.provider.ManagerProviderImpl.surgeryBookingDigitalTwinManager"]},{"name":"val bodyTemperature: PatientData.BodyTemperature? = null","description":"entity.patient.PatientData.MedicalData.bodyTemperature","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/body-temperature.html","searchKeys":["bodyTemperature","val bodyTemperature: PatientData.BodyTemperature? = null","entity.patient.PatientData.MedicalData.bodyTemperature"]},{"name":"val bpm: Int","description":"entity.patient.PatientData.HeartBeat.bpm","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-heart-beat/bpm.html","searchKeys":["bpm","val bpm: Int","entity.patient.PatientData.HeartBeat.bpm"]},{"name":"val code: String","description":"entity.patient.PatientData.TaxCode.code","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-tax-code/code.html","searchKeys":["code","val code: String","entity.patient.PatientData.TaxCode.code"]},{"name":"val data: E","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.data","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-data/data.html","searchKeys":["data","val data: E","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.data"]},{"name":"val database: MongoDatabase","description":"infrastructure.database.DatabaseManager.database","location":"surgical-process-monitoring-microservice/infrastructure.database/-database-manager/database.html","searchKeys":["database","val database: MongoDatabase","infrastructure.database.DatabaseManager.database"]},{"name":"val dateTime: Instant","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage/date-time.html","searchKeys":["dateTime","val dateTime: Instant","application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.dateTime"]},{"name":"val dateTime: Instant","description":"application.presenter.database.model.TimeSeriesPatientMedicalData.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data/date-time.html","searchKeys":["dateTime","val dateTime: Instant","application.presenter.database.model.TimeSeriesPatientMedicalData.dateTime"]},{"name":"val dateTime: Instant","description":"application.presenter.database.model.TimeSeriesProcessStateEvent.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event/date-time.html","searchKeys":["dateTime","val dateTime: Instant","application.presenter.database.model.TimeSeriesProcessStateEvent.dateTime"]},{"name":"val dateTime: Instant","description":"application.presenter.database.model.TimeSeriesProcessStepEvent.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event/date-time.html","searchKeys":["dateTime","val dateTime: Instant","application.presenter.database.model.TimeSeriesProcessStepEvent.dateTime"]},{"name":"val dateTime: Instant","description":"entity.booking.SurgeryBooking.dateTime","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/date-time.html","searchKeys":["dateTime","val dateTime: Instant","entity.booking.SurgeryBooking.dateTime"]},{"name":"val dateTime: Instant","description":"entity.process.SurgicalProcess.dateTime","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/date-time.html","searchKeys":["dateTime","val dateTime: Instant","entity.process.SurgicalProcess.dateTime"]},{"name":"val dateTime: String","description":"application.presenter.api.SurgicalProcessApiDto.dateTime","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/date-time.html","searchKeys":["dateTime","val dateTime: String","application.presenter.api.SurgicalProcessApiDto.dateTime"]},{"name":"val degree: Double","description":"entity.patient.PatientData.BodyTemperature.degree","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-body-temperature/degree.html","searchKeys":["degree","val degree: Double","entity.patient.PatientData.BodyTemperature.degree"]},{"name":"val description: String? = null","description":"entity.medicaldevice.MedicalTechnology.description","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/description.html","searchKeys":["description","val description: String? = null","entity.medicaldevice.MedicalTechnology.description"]},{"name":"val diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null","description":"entity.patient.PatientData.MedicalData.diastolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/diastolic-blood-pressure.html","searchKeys":["diastolicBloodPressure","val diastolicBloodPressure: PatientData.DiastolicBloodPressure? = null","entity.patient.PatientData.MedicalData.diastolicBloodPressure"]},{"name":"val entered: Boolean","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.entered","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/entered.html","searchKeys":["entered","val entered: Boolean","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.entered"]},{"name":"val entries: List<T>","description":"infrastructure.api.util.ResponseEntryList.entries","location":"surgical-process-monitoring-microservice/infrastructure.api.util/-response-entry-list/entries.html","searchKeys":["entries","val entries: List<T>","infrastructure.api.util.ResponseEntryList.entries"]},{"name":"val healthProfessionalId: HealthProfessionalData.HealthProfessionalId","description":"entity.booking.SurgeryBooking.healthProfessionalId","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/health-professional-id.html","searchKeys":["healthProfessionalId","val healthProfessionalId: HealthProfessionalData.HealthProfessionalId","entity.booking.SurgeryBooking.healthProfessionalId"]},{"name":"val healthProfessionalId: HealthProfessionalData.HealthProfessionalId?","description":"entity.report.SurgeryReport.healthProfessionalId","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/health-professional-id.html","searchKeys":["healthProfessionalId","val healthProfessionalId: HealthProfessionalData.HealthProfessionalId?","entity.report.SurgeryReport.healthProfessionalId"]},{"name":"val healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null","description":"entity.process.SurgicalProcess.healthProfessionalId","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/health-professional-id.html","searchKeys":["healthProfessionalId","val healthProfessionalId: HealthProfessionalData.HealthProfessionalId? = null","entity.process.SurgicalProcess.healthProfessionalId"]},{"name":"val healthProfessionalId: String","description":"application.presenter.event.serialization.SurgeryReportDto.healthProfessionalId","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/health-professional-id.html","searchKeys":["healthProfessionalId","val healthProfessionalId: String","application.presenter.event.serialization.SurgeryReportDto.healthProfessionalId"]},{"name":"val healthProfessionalId: String?","description":"application.presenter.api.SurgicalProcessApiDto.healthProfessionalId","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/health-professional-id.html","searchKeys":["healthProfessionalId","val healthProfessionalId: String?","application.presenter.api.SurgicalProcessApiDto.healthProfessionalId"]},{"name":"val heartBeat: PatientData.HeartBeat? = null","description":"entity.patient.PatientData.MedicalData.heartBeat","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/heart-beat.html","searchKeys":["heartBeat","val heartBeat: PatientData.HeartBeat? = null","entity.patient.PatientData.MedicalData.heartBeat"]},{"name":"val heartbeat: Int","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat.heartbeat","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-heartbeat/heartbeat.html","searchKeys":["heartbeat","val heartbeat: Int","application.presenter.event.model.payloads.ProcessEventsPayloads.Heartbeat.heartbeat"]},{"name":"val id: HealthProfessionalData.HealthProfessionalId","description":"entity.healthprofessional.HealthProfessional.id","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/id.html","searchKeys":["id","val id: HealthProfessionalData.HealthProfessionalId","entity.healthprofessional.HealthProfessional.id"]},{"name":"val id: MedicalDeviceData.ImplantableMedicalDeviceId","description":"entity.medicaldevice.ImplantableMedicalDevice.id","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/id.html","searchKeys":["id","val id: MedicalDeviceData.ImplantableMedicalDeviceId","entity.medicaldevice.ImplantableMedicalDevice.id"]},{"name":"val id: MedicalDeviceData.MedicalTechnologyId","description":"entity.medicaldevice.MedicalTechnology.id","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/id.html","searchKeys":["id","val id: MedicalDeviceData.MedicalTechnologyId","entity.medicaldevice.MedicalTechnology.id"]},{"name":"val id: PatientData.PatientId","description":"entity.patient.Patient.id","location":"surgical-process-monitoring-microservice/entity.patient/-patient/id.html","searchKeys":["id","val id: PatientData.PatientId","entity.patient.Patient.id"]},{"name":"val id: ProcessData.ProcessId","description":"entity.process.SurgicalProcess.id","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/id.html","searchKeys":["id","val id: ProcessData.ProcessId","entity.process.SurgicalProcess.id"]},{"name":"val id: RoomData.RoomId","description":"entity.room.Room.id","location":"surgical-process-monitoring-microservice/entity.room/-room/id.html","searchKeys":["id","val id: RoomData.RoomId","entity.room.Room.id"]},{"name":"val id: String","description":"entity.booking.SurgeryBookingData.SurgeryBookingId.id","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking-data/-surgery-booking-id/id.html","searchKeys":["id","val id: String","entity.booking.SurgeryBookingData.SurgeryBookingId.id"]},{"name":"val id: String","description":"entity.healthprofessional.HealthProfessionalData.HealthProfessionalId.id","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional-data/-health-professional-id/id.html","searchKeys":["id","val id: String","entity.healthprofessional.HealthProfessionalData.HealthProfessionalId.id"]},{"name":"val id: String","description":"entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId.id","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-implantable-medical-device-id/id.html","searchKeys":["id","val id: String","entity.medicaldevice.MedicalDeviceData.ImplantableMedicalDeviceId.id"]},{"name":"val id: String","description":"entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId.id","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-device-data/-medical-technology-id/id.html","searchKeys":["id","val id: String","entity.medicaldevice.MedicalDeviceData.MedicalTechnologyId.id"]},{"name":"val id: String","description":"entity.patient.PatientData.PatientId.id","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-patient-id/id.html","searchKeys":["id","val id: String","entity.patient.PatientData.PatientId.id"]},{"name":"val id: String","description":"entity.process.ProcessData.ProcessId.id","location":"surgical-process-monitoring-microservice/entity.process/-process-data/-process-id/id.html","searchKeys":["id","val id: String","entity.process.ProcessData.ProcessId.id"]},{"name":"val id: String","description":"entity.room.RoomData.RoomId.id","location":"surgical-process-monitoring-microservice/entity.room/-room-data/-room-id/id.html","searchKeys":["id","val id: String","entity.room.RoomData.RoomId.id"]},{"name":"val id: SurgeryBookingData.SurgeryBookingId","description":"entity.booking.SurgeryBooking.id","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/id.html","searchKeys":["id","val id: SurgeryBookingData.SurgeryBookingId","entity.booking.SurgeryBooking.id"]},{"name":"val implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId","description":"application.presenter.database.model.MedicalDeviceUsage.implantableMedicalDeviceId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-device-usage/implantable-medical-device-id.html","searchKeys":["implantableMedicalDeviceId","val implantableMedicalDeviceId: MedicalDeviceData.ImplantableMedicalDeviceId","application.presenter.database.model.MedicalDeviceUsage.implantableMedicalDeviceId"]},{"name":"val inUse: Boolean","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.inUse","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-technology-usage/in-use.html","searchKeys":["inUse","val inUse: Boolean","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.inUse"]},{"name":"val inUse: Boolean","description":"entity.medicaldevice.MedicalTechnology.inUse","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/in-use.html","searchKeys":["inUse","val inUse: Boolean","entity.medicaldevice.MedicalTechnology.inUse"]},{"name":"val manualEvent: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.manualEvent","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-process-manual-event/manual-event.html","searchKeys":["manualEvent","val manualEvent: String","application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.manualEvent"]},{"name":"val medicalData: PatientData.MedicalData","description":"entity.patient.Patient.medicalData","location":"surgical-process-monitoring-microservice/entity.patient/-patient/medical-data.html","searchKeys":["medicalData","val medicalData: PatientData.MedicalData","entity.patient.Patient.medicalData"]},{"name":"val medicalDeviceID: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.medicalDeviceID","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-device-usage/medical-device-i-d.html","searchKeys":["medicalDeviceID","val medicalDeviceID: String","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.medicalDeviceID"]},{"name":"val medicalDeviceUsage: List<ImplantableMedicalDevice>","description":"application.presenter.event.serialization.SurgeryReportDto.medicalDeviceUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/medical-device-usage.html","searchKeys":["medicalDeviceUsage","val medicalDeviceUsage: List<ImplantableMedicalDevice>","application.presenter.event.serialization.SurgeryReportDto.medicalDeviceUsage"]},{"name":"val medicalDeviceUsage: List<ImplantableMedicalDevice>","description":"entity.report.SurgeryReport.medicalDeviceUsage","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/medical-device-usage.html","searchKeys":["medicalDeviceUsage","val medicalDeviceUsage: List<ImplantableMedicalDevice>","entity.report.SurgeryReport.medicalDeviceUsage"]},{"name":"val medicalTechnologyID: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.medicalTechnologyID","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-technology-usage/medical-technology-i-d.html","searchKeys":["medicalTechnologyID","val medicalTechnologyID: String","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalTechnologyUsage.medicalTechnologyID"]},{"name":"val medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.medicalTechnologyId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage-metadata/medical-technology-id.html","searchKeys":["medicalTechnologyId","val medicalTechnologyId: MedicalDeviceData.MedicalTechnologyId","application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.medicalTechnologyId"]},{"name":"val medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>","description":"entity.report.SurgeryReport.medicalTechnologyUsage","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/medical-technology-usage.html","searchKeys":["medicalTechnologyUsage","val medicalTechnologyUsage: List<Pair<Instant, MedicalTechnology>>","entity.report.SurgeryReport.medicalTechnologyUsage"]},{"name":"val medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>","description":"application.presenter.event.serialization.SurgeryReportDto.medicalTechnologyUsage","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/medical-technology-usage.html","searchKeys":["medicalTechnologyUsage","val medicalTechnologyUsage: List<Pair<String, MedicalTechnology>>","application.presenter.event.serialization.SurgeryReportDto.medicalTechnologyUsage"]},{"name":"val metadata: TimeSeriesMedicalTechnologyUsageMetadata","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.metadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage/metadata.html","searchKeys":["metadata","val metadata: TimeSeriesMedicalTechnologyUsageMetadata","application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.metadata"]},{"name":"val metadata: TimeSeriesPatientMedicalDataMetadata","description":"application.presenter.database.model.TimeSeriesPatientMedicalData.metadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data/metadata.html","searchKeys":["metadata","val metadata: TimeSeriesPatientMedicalDataMetadata","application.presenter.database.model.TimeSeriesPatientMedicalData.metadata"]},{"name":"val metadata: TimeSeriesProcessStateEventMetadata","description":"application.presenter.database.model.TimeSeriesProcessStateEvent.metadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event/metadata.html","searchKeys":["metadata","val metadata: TimeSeriesProcessStateEventMetadata","application.presenter.database.model.TimeSeriesProcessStateEvent.metadata"]},{"name":"val metadata: TimeSeriesProcessStepEventMetadata","description":"application.presenter.database.model.TimeSeriesProcessStepEvent.metadata","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event/metadata.html","searchKeys":["metadata","val metadata: TimeSeriesProcessStepEventMetadata","application.presenter.database.model.TimeSeriesProcessStepEvent.metadata"]},{"name":"val name: String","description":"entity.medicaldevice.MedicalTechnology.name","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/name.html","searchKeys":["name","val name: String","entity.medicaldevice.MedicalTechnology.name"]},{"name":"val name: String? = null","description":"entity.healthprofessional.HealthProfessional.name","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/name.html","searchKeys":["name","val name: String? = null","entity.healthprofessional.HealthProfessional.name"]},{"name":"val name: String? = null","description":"entity.patient.Patient.name","location":"surgical-process-monitoring-microservice/entity.patient/-patient/name.html","searchKeys":["name","val name: String? = null","entity.patient.Patient.name"]},{"name":"val operatingRoom: Room?","description":"application.presenter.api.SurgicalProcessApiDto.operatingRoom","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/operating-room.html","searchKeys":["operatingRoom","val operatingRoom: Room?","application.presenter.api.SurgicalProcessApiDto.operatingRoom"]},{"name":"val operatingRoom: Room?","description":"entity.report.SurgeryReport.operatingRoom","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/operating-room.html","searchKeys":["operatingRoom","val operatingRoom: Room?","entity.report.SurgeryReport.operatingRoom"]},{"name":"val operatingRoom: Room? = null","description":"entity.process.SurgicalProcess.operatingRoom","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/operating-room.html","searchKeys":["operatingRoom","val operatingRoom: Room? = null","entity.process.SurgicalProcess.operatingRoom"]},{"name":"val operatingRoomId: String","description":"application.presenter.event.serialization.SurgeryReportDto.operatingRoomId","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/operating-room-id.html","searchKeys":["operatingRoomId","val operatingRoomId: String","application.presenter.event.serialization.SurgeryReportDto.operatingRoomId"]},{"name":"val patientId: PatientData.PatientId","description":"application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.patientId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data-metadata/patient-id.html","searchKeys":["patientId","val patientId: PatientData.PatientId","application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.patientId"]},{"name":"val patientId: PatientData.PatientId","description":"entity.booking.SurgeryBooking.patientId","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/patient-id.html","searchKeys":["patientId","val patientId: PatientData.PatientId","entity.booking.SurgeryBooking.patientId"]},{"name":"val patientId: PatientData.PatientId","description":"entity.process.SurgicalProcess.patientId","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/patient-id.html","searchKeys":["patientId","val patientId: PatientData.PatientId","entity.process.SurgicalProcess.patientId"]},{"name":"val patientId: PatientData.PatientId","description":"entity.report.SurgeryReport.patientId","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/patient-id.html","searchKeys":["patientId","val patientId: PatientData.PatientId","entity.report.SurgeryReport.patientId"]},{"name":"val patientId: String","description":"application.presenter.api.SurgicalProcessApiDto.patientId","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/patient-id.html","searchKeys":["patientId","val patientId: String","application.presenter.api.SurgicalProcessApiDto.patientId"]},{"name":"val patientId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.patientId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-data/patient-id.html","searchKeys":["patientId","val patientId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientData.patientId"]},{"name":"val patientId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable.patientId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-on-operating-table/patient-id.html","searchKeys":["patientId","val patientId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientOnOperatingTable.patientId"]},{"name":"val patientId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.patientId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/patient-id.html","searchKeys":["patientId","val patientId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.patientId"]},{"name":"val patientId: String","description":"application.presenter.event.serialization.SurgeryReportDto.patientId","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/patient-id.html","searchKeys":["patientId","val patientId: String","application.presenter.event.serialization.SurgeryReportDto.patientId"]},{"name":"val patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>","description":"entity.report.SurgeryReport.patientMedicalData","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/patient-medical-data.html","searchKeys":["patientMedicalData","val patientMedicalData: List<Pair<Instant, PatientData.MedicalData>>","entity.report.SurgeryReport.patientMedicalData"]},{"name":"val patientMedicalData: List<Pair<String, PatientData.MedicalData>>","description":"application.presenter.event.serialization.SurgeryReportDto.patientMedicalData","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/patient-medical-data.html","searchKeys":["patientMedicalData","val patientMedicalData: List<Pair<String, PatientData.MedicalData>>","application.presenter.event.serialization.SurgeryReportDto.patientMedicalData"]},{"name":"val patientTaxCode: PatientData.TaxCode?","description":"entity.report.SurgeryReport.patientTaxCode","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/patient-tax-code.html","searchKeys":["patientTaxCode","val patientTaxCode: PatientData.TaxCode?","entity.report.SurgeryReport.patientTaxCode"]},{"name":"val patientTaxCode: String","description":"application.presenter.event.serialization.SurgeryReportDto.patientTaxCode","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/patient-tax-code.html","searchKeys":["patientTaxCode","val patientTaxCode: String","application.presenter.event.serialization.SurgeryReportDto.patientTaxCode"]},{"name":"val patientTaxCode: String?","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.patientTaxCode","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-emergency-surgery/patient-tax-code.html","searchKeys":["patientTaxCode","val patientTaxCode: String?","application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.patientTaxCode"]},{"name":"val percentage: Int","description":"entity.patient.PatientData.SaturationPercentage.percentage","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-saturation-percentage/percentage.html","searchKeys":["percentage","val percentage: Int","entity.patient.PatientData.SaturationPercentage.percentage"]},{"name":"val preOperatingRoom: Room?","description":"application.presenter.api.SurgicalProcessApiDto.preOperatingRoom","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/pre-operating-room.html","searchKeys":["preOperatingRoom","val preOperatingRoom: Room?","application.presenter.api.SurgicalProcessApiDto.preOperatingRoom"]},{"name":"val preOperatingRoom: Room?","description":"entity.report.SurgeryReport.preOperatingRoom","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/pre-operating-room.html","searchKeys":["preOperatingRoom","val preOperatingRoom: Room?","entity.report.SurgeryReport.preOperatingRoom"]},{"name":"val preOperatingRoom: Room? = null","description":"entity.process.SurgicalProcess.preOperatingRoom","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/pre-operating-room.html","searchKeys":["preOperatingRoom","val preOperatingRoom: Room? = null","entity.process.SurgicalProcess.preOperatingRoom"]},{"name":"val preOperatingRoomId: String","description":"application.presenter.event.serialization.SurgeryReportDto.preOperatingRoomId","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/pre-operating-room-id.html","searchKeys":["preOperatingRoomId","val preOperatingRoomId: String","application.presenter.event.serialization.SurgeryReportDto.preOperatingRoomId"]},{"name":"val pressure: Int","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure.pressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-diastolic-pressure/pressure.html","searchKeys":["pressure","val pressure: Int","application.presenter.event.model.payloads.ProcessEventsPayloads.DiastolicPressure.pressure"]},{"name":"val pressure: Int","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure.pressure","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-systolic-pressure/pressure.html","searchKeys":["pressure","val pressure: Int","application.presenter.event.model.payloads.ProcessEventsPayloads.SystolicPressure.pressure"]},{"name":"val pressure: Int","description":"entity.patient.PatientData.DiastolicBloodPressure.pressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-diastolic-blood-pressure/pressure.html","searchKeys":["pressure","val pressure: Int","entity.patient.PatientData.DiastolicBloodPressure.pressure"]},{"name":"val pressure: Int","description":"entity.patient.PatientData.SystolicBloodPressure.pressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-systolic-blood-pressure/pressure.html","searchKeys":["pressure","val pressure: Int","entity.patient.PatientData.SystolicBloodPressure.pressure"]},{"name":"val processId: ProcessData.ProcessId","description":"application.presenter.database.model.MedicalDeviceUsage.processId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-medical-device-usage/process-id.html","searchKeys":["processId","val processId: ProcessData.ProcessId","application.presenter.database.model.MedicalDeviceUsage.processId"]},{"name":"val processId: ProcessData.ProcessId","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.processId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage-metadata/process-id.html","searchKeys":["processId","val processId: ProcessData.ProcessId","application.presenter.database.model.TimeSeriesMedicalTechnologyUsageMetadata.processId"]},{"name":"val processId: ProcessData.ProcessId","description":"application.presenter.database.model.TimeSeriesProcessStateEventMetadata.processId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event-metadata/process-id.html","searchKeys":["processId","val processId: ProcessData.ProcessId","application.presenter.database.model.TimeSeriesProcessStateEventMetadata.processId"]},{"name":"val processId: ProcessData.ProcessId","description":"application.presenter.database.model.TimeSeriesProcessStepEventMetadata.processId","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event-metadata/process-id.html","searchKeys":["processId","val processId: ProcessData.ProcessId","application.presenter.database.model.TimeSeriesProcessStepEventMetadata.processId"]},{"name":"val processId: ProcessData.ProcessId","description":"entity.report.SurgeryReport.processId","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/process-id.html","searchKeys":["processId","val processId: ProcessData.ProcessId","entity.report.SurgeryReport.processId"]},{"name":"val processId: String","description":"application.presenter.api.SurgicalProcessApiDto.processId","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/process-id.html","searchKeys":["processId","val processId: String","application.presenter.api.SurgicalProcessApiDto.processId"]},{"name":"val processId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.processId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-medical-device-usage/process-id.html","searchKeys":["processId","val processId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.MedicalDeviceUsage.processId"]},{"name":"val processId: String","description":"application.presenter.event.serialization.SurgeryReportDto.processId","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/process-id.html","searchKeys":["processId","val processId: String","application.presenter.event.serialization.SurgeryReportDto.processId"]},{"name":"val processStates: List<Pair<Instant, ProcessData.ProcessState>>","description":"entity.report.SurgeryReport.processStates","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/process-states.html","searchKeys":["processStates","val processStates: List<Pair<Instant, ProcessData.ProcessState>>","entity.report.SurgeryReport.processStates"]},{"name":"val processStates: List<Pair<String, ProcessData.ProcessState>>","description":"application.presenter.event.serialization.SurgeryReportDto.processStates","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/process-states.html","searchKeys":["processStates","val processStates: List<Pair<String, ProcessData.ProcessState>>","application.presenter.event.serialization.SurgeryReportDto.processStates"]},{"name":"val processSteps: List<Pair<Instant, ProcessData.ProcessStep>>","description":"entity.report.SurgeryReport.processSteps","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/process-steps.html","searchKeys":["processSteps","val processSteps: List<Pair<Instant, ProcessData.ProcessStep>>","entity.report.SurgeryReport.processSteps"]},{"name":"val processSteps: List<Pair<String, ProcessData.ProcessStep>>","description":"application.presenter.event.serialization.SurgeryReportDto.processSteps","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/process-steps.html","searchKeys":["processSteps","val processSteps: List<Pair<String, ProcessData.ProcessStep>>","application.presenter.event.serialization.SurgeryReportDto.processSteps"]},{"name":"val processType: String","description":"application.presenter.event.serialization.SurgeryReportDto.processType","location":"surgical-process-monitoring-microservice/application.presenter.event.serialization/-surgery-report-dto/process-type.html","searchKeys":["processType","val processType: String","application.presenter.event.serialization.SurgeryReportDto.processType"]},{"name":"val processType: String","description":"entity.report.SurgeryReport.processType","location":"surgical-process-monitoring-microservice/entity.report/-surgery-report/process-type.html","searchKeys":["processType","val processType: String","entity.report.SurgeryReport.processType"]},{"name":"val query: String","description":"infrastructure.digitaltwin.query.AdtQuery.query","location":"surgical-process-monitoring-microservice/infrastructure.digitaltwin.query/-adt-query/query.html","searchKeys":["query","val query: String","infrastructure.digitaltwin.query.AdtQuery.query"]},{"name":"val rate: Int","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate.rate","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-respiratory-rate/rate.html","searchKeys":["rate","val rate: Int","application.presenter.event.model.payloads.ProcessEventsPayloads.RespiratoryRate.rate"]},{"name":"val rate: Int","description":"entity.patient.PatientData.RespiratoryRate.rate","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-respiratory-rate/rate.html","searchKeys":["rate","val rate: Int","entity.patient.PatientData.RespiratoryRate.rate"]},{"name":"val respiratoryRate: PatientData.RespiratoryRate? = null","description":"entity.patient.PatientData.MedicalData.respiratoryRate","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/respiratory-rate.html","searchKeys":["respiratoryRate","val respiratoryRate: PatientData.RespiratoryRate? = null","entity.patient.PatientData.MedicalData.respiratoryRate"]},{"name":"val role: HealthProfessionalData.HealthProfessionalRole","description":"entity.healthprofessional.HealthProfessional.role","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/role.html","searchKeys":["role","val role: HealthProfessionalData.HealthProfessionalRole","entity.healthprofessional.HealthProfessional.role"]},{"name":"val roomId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.roomId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-emergency-surgery/room-id.html","searchKeys":["roomId","val roomId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.EmergencySurgery.roomId"]},{"name":"val roomId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.roomId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/room-id.html","searchKeys":["roomId","val roomId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.roomId"]},{"name":"val roomId: String","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.roomId","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-process-manual-event/room-id.html","searchKeys":["roomId","val roomId: String","application.presenter.event.model.payloads.ProcessEventsPayloads.ProcessManualEvent.roomId"]},{"name":"val roomType: ProcessEventsPayloads.RoomType","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.roomType","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-patient-tracked/room-type.html","searchKeys":["roomType","val roomType: ProcessEventsPayloads.RoomType","application.presenter.event.model.payloads.ProcessEventsPayloads.PatientTracked.roomType"]},{"name":"val saturation: Int","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation.saturation","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-saturation/saturation.html","searchKeys":["saturation","val saturation: Int","application.presenter.event.model.payloads.ProcessEventsPayloads.Saturation.saturation"]},{"name":"val saturationPercentage: PatientData.SaturationPercentage? = null","description":"entity.patient.PatientData.MedicalData.saturationPercentage","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/saturation-percentage.html","searchKeys":["saturationPercentage","val saturationPercentage: PatientData.SaturationPercentage? = null","entity.patient.PatientData.MedicalData.saturationPercentage"]},{"name":"val state: ProcessData.ProcessState","description":"entity.process.SurgicalProcess.state","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/state.html","searchKeys":["state","val state: ProcessData.ProcessState","entity.process.SurgicalProcess.state"]},{"name":"val state: String","description":"application.presenter.api.SurgicalProcessApiDto.state","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/state.html","searchKeys":["state","val state: String","application.presenter.api.SurgicalProcessApiDto.state"]},{"name":"val step: ProcessData.ProcessStep? = null","description":"entity.process.SurgicalProcess.step","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/step.html","searchKeys":["step","val step: ProcessData.ProcessStep? = null","entity.process.SurgicalProcess.step"]},{"name":"val step: String","description":"application.presenter.api.SurgicalProcessApiDto.step","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/step.html","searchKeys":["step","val step: String","application.presenter.api.SurgicalProcessApiDto.step"]},{"name":"val surgeryType: String","description":"entity.booking.SurgeryBooking.surgeryType","location":"surgical-process-monitoring-microservice/entity.booking/-surgery-booking/surgery-type.html","searchKeys":["surgeryType","val surgeryType: String","entity.booking.SurgeryBooking.surgeryType"]},{"name":"val surname: String? = null","description":"entity.healthprofessional.HealthProfessional.surname","location":"surgical-process-monitoring-microservice/entity.healthprofessional/-health-professional/surname.html","searchKeys":["surname","val surname: String? = null","entity.healthprofessional.HealthProfessional.surname"]},{"name":"val surname: String? = null","description":"entity.patient.Patient.surname","location":"surgical-process-monitoring-microservice/entity.patient/-patient/surname.html","searchKeys":["surname","val surname: String? = null","entity.patient.Patient.surname"]},{"name":"val systolicBloodPressure: PatientData.SystolicBloodPressure? = null","description":"entity.patient.PatientData.MedicalData.systolicBloodPressure","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-medical-data/systolic-blood-pressure.html","searchKeys":["systolicBloodPressure","val systolicBloodPressure: PatientData.SystolicBloodPressure? = null","entity.patient.PatientData.MedicalData.systolicBloodPressure"]},{"name":"val temperature: Double","description":"application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature.temperature","location":"surgical-process-monitoring-microservice/application.presenter.event.model.payloads/-process-events-payloads/-body-temperature/temperature.html","searchKeys":["temperature","val temperature: Double","application.presenter.event.model.payloads.ProcessEventsPayloads.BodyTemperature.temperature"]},{"name":"val total: Int","description":"infrastructure.api.util.ResponseEntryList.total","location":"surgical-process-monitoring-microservice/infrastructure.api.util/-response-entry-list/total.html","searchKeys":["total","val total: Int","infrastructure.api.util.ResponseEntryList.total"]},{"name":"val type: MedicalDataType","description":"application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.type","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data-metadata/type.html","searchKeys":["type","val type: MedicalDataType","application.presenter.database.model.TimeSeriesPatientMedicalDataMetadata.type"]},{"name":"val type: MedicalDeviceData.DeviceType","description":"entity.medicaldevice.ImplantableMedicalDevice.type","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-implantable-medical-device/type.html","searchKeys":["type","val type: MedicalDeviceData.DeviceType","entity.medicaldevice.ImplantableMedicalDevice.type"]},{"name":"val type: MedicalDeviceData.MedicalTechnologyType","description":"entity.medicaldevice.MedicalTechnology.type","location":"surgical-process-monitoring-microservice/entity.medicaldevice/-medical-technology/type.html","searchKeys":["type","val type: MedicalDeviceData.MedicalTechnologyType","entity.medicaldevice.MedicalTechnology.type"]},{"name":"val type: RoomData.RoomType","description":"entity.room.Room.type","location":"surgical-process-monitoring-microservice/entity.room/-room/type.html","searchKeys":["type","val type: RoomData.RoomType","entity.room.Room.type"]},{"name":"val type: String","description":"application.presenter.api.SurgicalProcessApiDto.type","location":"surgical-process-monitoring-microservice/application.presenter.api/-surgical-process-api-dto/type.html","searchKeys":["type","val type: String","application.presenter.api.SurgicalProcessApiDto.type"]},{"name":"val type: String","description":"entity.process.SurgicalProcess.type","location":"surgical-process-monitoring-microservice/entity.process/-surgical-process/type.html","searchKeys":["type","val type: String","entity.process.SurgicalProcess.type"]},{"name":"val unit: PatientData.TemperatureUnit","description":"entity.patient.PatientData.BodyTemperature.unit","location":"surgical-process-monitoring-microservice/entity.patient/-patient-data/-body-temperature/unit.html","searchKeys":["unit","val unit: PatientData.TemperatureUnit","entity.patient.PatientData.BodyTemperature.unit"]},{"name":"val value: Boolean","description":"application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.value","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-medical-technology-usage/value.html","searchKeys":["value","val value: Boolean","application.presenter.database.model.TimeSeriesMedicalTechnologyUsage.value"]},{"name":"val value: Double","description":"application.presenter.database.model.TimeSeriesPatientMedicalData.value","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-patient-medical-data/value.html","searchKeys":["value","val value: Double","application.presenter.database.model.TimeSeriesPatientMedicalData.value"]},{"name":"val value: ProcessData.ProcessState","description":"application.presenter.database.model.TimeSeriesProcessStateEvent.value","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-state-event/value.html","searchKeys":["value","val value: ProcessData.ProcessState","application.presenter.database.model.TimeSeriesProcessStateEvent.value"]},{"name":"val value: ProcessData.ProcessStep","description":"application.presenter.database.model.TimeSeriesProcessStepEvent.value","location":"surgical-process-monitoring-microservice/application.presenter.database.model/-time-series-process-step-event/value.html","searchKeys":["value","val value: ProcessData.ProcessStep","application.presenter.database.model.TimeSeriesProcessStepEvent.value"]}]
